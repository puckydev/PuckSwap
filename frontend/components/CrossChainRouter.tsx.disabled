// PuckSwap v5 - Cross-Chain Router Frontend Component
// Full implementation with Lucid Evolution CIP-30 integration and real-time monitoring
// Retro terminal aesthetic with professional DEX interface standards

'use client';

import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { toast } from 'react-hot-toast';
import { PuckSwapCrossChainRouter } from '../../src/lucid/crosschain';
import { 
  CrossChainRouterDatum, 
  ChainConnection, 
  CrossChainRouterMonitor,
  createCrossChainRouterMonitor 
} from '../../src/context7/crosschain_monitor';
import { formatADA, formatNumber } from '../../src/lib/format-utils';
import { getEnvironmentConfig } from '../../src/lib/environment-config';

// Component interfaces
interface CrossChainRouterProps {
  isDemoMode?: boolean;
}

interface OutboundTransferForm {
  chainId: string;
  assetType: 'ADA' | 'TOKEN';
  amount: string;
  tokenPolicy?: string;
  tokenName?: string;
  recipientAddress: string;
}

interface InboundTransferForm {
  chainId: string;
  nonce: string;
  bridgeSignature: string;
  assetType: 'ADA' | 'TOKEN';
  amount: string;
  tokenPolicy?: string;
  tokenName?: string;
  recipientAddress: string;
}

interface TransactionState {
  isSubmitting: boolean;
  txHash: string | null;
  status: 'idle' | 'pending' | 'submitted' | 'success' | 'error';
  error: string | null;
}

export default function CrossChainRouter({ isDemoMode = false }: CrossChainRouterProps) {
  // State management
  const [walletConnected, setWalletConnected] = useState(false);
  const [walletAddress, setWalletAddress] = useState<string | null>(null);
  const [routerBuilder, setRouterBuilder] = useState<PuckSwapCrossChainRouter | null>(null);
  const [routerMonitor, setRouterMonitor] = useState<CrossChainRouterMonitor | null>(null);
  const [routerState, setRouterState] = useState<CrossChainRouterDatum | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string>('');
  const [activeTab, setActiveTab] = useState<'outbound' | 'inbound' | 'status'>('outbound');

  // Form states
  const [outboundForm, setOutboundForm] = useState<OutboundTransferForm>({
    chainId: '',
    assetType: 'ADA',
    amount: '',
    recipientAddress: ''
  });

  const [inboundForm, setInboundForm] = useState<InboundTransferForm>({
    chainId: '',
    nonce: '',
    bridgeSignature: '',
    assetType: 'ADA',
    amount: '',
    recipientAddress: ''
  });

  // Transaction states
  const [outboundTx, setOutboundTx] = useState<TransactionState>({
    isSubmitting: false,
    txHash: null,
    status: 'idle',
    error: null
  });

  const [inboundTx, setInboundTx] = useState<TransactionState>({
    isSubmitting: false,
    txHash: null,
    status: 'idle',
    error: null
  });

  // Demo data for demonstration mode
  const demoRouterState: CrossChainRouterDatum = {
    total_volume: 15000000000000n, // 15M ADA
    last_processed_nonce: 5000n,
    chain_connections: [
      { chain_id: 1n, bridge_address: "0x1234567890abcdef1234567890abcdef12345678" },
      { chain_id: 56n, bridge_address: "0xabcdef1234567890abcdef1234567890abcdef12" },
      { chain_id: 137n, bridge_address: "0xfedcba0987654321fedcba0987654321fedcba09" },
      { chain_id: 43114n, bridge_address: "0x9876543210fedcba9876543210fedcba98765432" }
    ]
  };

  // Chain information mapping
  const chainInfo: Record<string, { name: string; icon: string; color: string }> = useMemo(() => ({
    '1': { name: 'Ethereum', icon: '⟠', color: 'text-blue-400' },
    '56': { name: 'BSC', icon: '🟡', color: 'text-yellow-400' },
    '137': { name: 'Polygon', icon: '🟣', color: 'text-purple-400' },
    '43114': { name: 'Avalanche', icon: '🔺', color: 'text-red-400' },
    '42161': { name: 'Arbitrum', icon: '🔵', color: 'text-blue-500' }
  }), []);

  // Get chain display name
  const getChainName = useCallback((chainId: bigint): string => {
    return chainInfo[chainId.toString()]?.name || `Chain ${chainId}`;
  }, [chainInfo]);

  // Get chain icon
  const getChainIcon = useCallback((chainId: bigint): string => {
    return chainInfo[chainId.toString()]?.icon || '🔗';
  }, [chainInfo]);

  // Connect wallet using Lucid Evolution CIP-30
  const connectWallet = async () => {
    try {
      setIsLoading(true);
      setError('');
      
      {
        // Real wallet connection
        const envConfig = getEnvironmentConfig();
        const builder = await PuckSwapCrossChainRouter.create(
          {
            routerValidator: process.env.NEXT_PUBLIC_ROUTER_VALIDATOR_CBOR || 'mock_cbor',
            packetValidator: process.env.NEXT_PUBLIC_PACKET_VALIDATOR_CBOR || 'mock_cbor'
          },
          process.env.NEXT_PUBLIC_ROUTER_ADDRESS || 'addr_test1...',
          envConfig.lucidNetwork as "Mainnet" | "Preview" | "Preprod",
          "eternl"
        );
        
        setRouterBuilder(builder);
        setWalletConnected(true);
        setWalletAddress('addr_test1...real_address');
        
        // Initialize monitor for real-time updates
        const monitor = await createCrossChainRouterMonitor({
          routerAddress: process.env.NEXT_PUBLIC_ROUTER_ADDRESS || 'addr_test1...'
        });
        
        setRouterMonitor(monitor);
        // await monitor.start(); // TODO: Fix monitor interface for MVP
        
        toast.success('Wallet connected successfully!');
      }
      
    } catch (err) {
      const errorMsg = err instanceof Error ? err.message : 'Failed to connect wallet';
      setError(errorMsg);
      toast.error(errorMsg);
    } finally {
      setIsLoading(false);
    }
  };

  // Subscribe to real-time router state updates
  useEffect(() => {
    if (!routerMonitor || isDemoMode) return;

    const handleStateUpdate = (event: any) => {
      if (event.data?.newState) {
        setRouterState(event.data.newState);
      }
    };

    routerMonitor.addEventListener('RouterStateUpdated', handleStateUpdate);
    routerMonitor.addEventListener('OutboundTransferInitiated', handleStateUpdate);
    routerMonitor.addEventListener('InboundTransferFinalized', handleStateUpdate);

    return () => {
      routerMonitor.removeEventListener('RouterStateUpdated', handleStateUpdate);
      routerMonitor.removeEventListener('OutboundTransferInitiated', handleStateUpdate);
      routerMonitor.removeEventListener('InboundTransferFinalized', handleStateUpdate);
    };
  }, [routerMonitor, isDemoMode]);

  // Initiate outbound cross-chain transfer
  const handleOutboundTransfer = async () => {
    if (!walletConnected) {
      toast.error('Please connect your wallet first');
      return;
    }

    if (!outboundForm.chainId || !outboundForm.amount || !outboundForm.recipientAddress) {
      toast.error('Please fill in all required fields');
      return;
    }

    try {
      setOutboundTx({ isSubmitting: true, txHash: null, status: 'pending', error: null });

      const chainId = BigInt(outboundForm.chainId);
      const amount = BigInt(Math.floor(parseFloat(outboundForm.amount) * 1_000_000)); // Convert to lovelace

      if (isDemoMode) {
        // Demo mode simulation
        await new Promise(resolve => setTimeout(resolve, 2500));
        const mockTxHash = 'demo_tx_' + Math.random().toString(36).substr(2, 9);
        
        setOutboundTx({
          isSubmitting: false,
          txHash: mockTxHash,
          status: 'success',
          error: null
        });

        toast.success(`Demo outbound transfer initiated! Chain: ${getChainName(chainId)}`, {
          duration: 5000,
          icon: '🌉'
        });

        // Reset form
        setOutboundForm({
          chainId: '',
          assetType: 'ADA',
          amount: '',
          recipientAddress: ''
        });
      } else if (routerBuilder) {
        const txHash = await routerBuilder.initiateCrossChainTransfer({
          chainId,
          assetType: outboundForm.assetType,
          amount,
          tokenPolicy: outboundForm.tokenPolicy,
          tokenName: outboundForm.tokenName,
          recipientAddress: outboundForm.recipientAddress
        });

        setOutboundTx({
          isSubmitting: false,
          txHash,
          status: 'success',
          error: null
        });

        toast.success(`Outbound transfer initiated! TX: ${txHash.slice(0, 8)}...`, {
          duration: 10000,
          icon: '🌉'
        });

        // Reset form
        setOutboundForm({
          chainId: '',
          assetType: 'ADA',
          amount: '',
          recipientAddress: ''
        });
      }
    } catch (err) {
      const errorMsg = err instanceof Error ? err.message : 'Failed to initiate transfer';
      setOutboundTx({
        isSubmitting: false,
        txHash: null,
        status: 'error',
        error: errorMsg
      });
      toast.error(errorMsg);
    }
  };

  // Finalize inbound cross-chain transfer (Admin/Bridge Operator)
  const handleInboundTransfer = async () => {
    if (!walletConnected) {
      toast.error('Please connect your wallet first');
      return;
    }

    if (!inboundForm.chainId || !inboundForm.nonce || !inboundForm.bridgeSignature || 
        !inboundForm.amount || !inboundForm.recipientAddress) {
      toast.error('Please fill in all required fields');
      return;
    }

    try {
      setInboundTx({ isSubmitting: true, txHash: null, status: 'pending', error: null });

      const chainId = BigInt(inboundForm.chainId);
      const nonce = BigInt(inboundForm.nonce);
      const amount = BigInt(Math.floor(parseFloat(inboundForm.amount) * 1_000_000)); // Convert to lovelace

      if (isDemoMode) {
        // Demo mode simulation
        await new Promise(resolve => setTimeout(resolve, 3000));
        const mockTxHash = 'demo_inbound_tx_' + Math.random().toString(36).substr(2, 9);
        
        setInboundTx({
          isSubmitting: false,
          txHash: mockTxHash,
          status: 'success',
          error: null
        });

        toast.success(`Demo inbound transfer finalized! Nonce: ${nonce}`, {
          duration: 5000,
          icon: '✅'
        });

        // Reset form
        setInboundForm({
          chainId: '',
          nonce: '',
          bridgeSignature: '',
          assetType: 'ADA',
          amount: '',
          recipientAddress: ''
        });
      } else if (routerBuilder) {
        const txHash = await routerBuilder.finalizeInboundTransfer({
          chainId,
          nonce,
          bridgeSignature: inboundForm.bridgeSignature,
          assetType: inboundForm.assetType,
          amount,
          tokenPolicy: inboundForm.tokenPolicy,
          tokenName: inboundForm.tokenName,
          recipientAddress: inboundForm.recipientAddress
        });

        setInboundTx({
          isSubmitting: false,
          txHash,
          status: 'success',
          error: null
        });

        toast.success(`Inbound transfer finalized! TX: ${txHash.slice(0, 8)}...`, {
          duration: 10000,
          icon: '✅'
        });

        // Reset form
        setInboundForm({
          chainId: '',
          nonce: '',
          bridgeSignature: '',
          assetType: 'ADA',
          amount: '',
          recipientAddress: ''
        });
      }
    } catch (err) {
      const errorMsg = err instanceof Error ? err.message : 'Failed to finalize transfer';
      setInboundTx({
        isSubmitting: false,
        txHash: null,
        status: 'error',
        error: errorMsg
      });
      toast.error(errorMsg);
    }
  };

  return (
    <div className="min-h-screen bg-terminal-black text-terminal-green font-mono">
      {/* Header */}
      <div className="border-b border-terminal-green/30 bg-terminal-black/90 backdrop-blur-sm sticky top-0 z-10">
        <div className="max-w-6xl mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-2xl font-bold text-glow">
                CROSS_CHAIN_ROUTER.exe
              </h1>
              <p className="text-terminal-green/70 text-sm mt-1">
                Multi-Chain Bridge • Asset Transfer • Cross-Chain DeFi
              </p>
            </div>

            {routerState && (
              <div className="flex items-center space-x-6 text-sm">
                <div className="text-center">
                  <div className="text-terminal-amber font-bold">
                    {formatADA(Number(routerState.total_volume) / 1_000_000)}
                  </div>
                  <div className="text-terminal-green/70">Total Volume</div>
                </div>
                <div className="text-center">
                  <div className="text-terminal-amber font-bold">
                    {formatNumber(Number(routerState.last_processed_nonce))}
                  </div>
                  <div className="text-terminal-green/70">Last Nonce</div>
                </div>
                <div className="text-center">
                  <div className="text-terminal-amber font-bold">
                    {routerState.chain_connections.length}
                  </div>
                  <div className="text-terminal-green/70">Chains</div>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Wallet Connection */}
      {!walletConnected && (
        <div className="max-w-6xl mx-auto px-4 py-8">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="bg-terminal-gray/10 border border-terminal-green/30 rounded-lg p-8 text-center"
          >
            <h2 className="text-xl font-bold mb-4 text-glow">Connect Wallet</h2>
            <p className="text-terminal-green/70 mb-6">
              Connect your wallet to access cross-chain transfer functionality
            </p>
            <button
              onClick={connectWallet}
              disabled={isLoading}
              className="bg-terminal-green text-terminal-black px-8 py-3 rounded font-bold
                       hover:bg-terminal-green/90 transition-all duration-300 disabled:opacity-50"
            >
              {isLoading ? 'CONNECTING...' : 'CONNECT WALLET'}
            </button>
            {error && (
              <div className="mt-4 text-red-400 text-sm">
                Error: {error}
              </div>
            )}
          </motion.div>
        </div>
      )}

      {/* Main Interface */}
      {walletConnected && (
        <div className="max-w-6xl mx-auto px-4 py-6">
          {/* Navigation Tabs */}
          <div className="flex space-x-1 bg-terminal-gray/10 p-1 rounded border border-terminal-green/30 mb-6">
            {[
              { id: 'outbound', label: 'OUTBOUND TRANSFER', icon: '🚀' },
              { id: 'inbound', label: 'INBOUND TRANSFER', icon: '📥' },
              { id: 'status', label: 'ROUTER STATUS', icon: '📊' }
            ].map((tab) => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id as any)}
                className={`flex-1 py-3 px-4 text-sm font-bold transition-all duration-300 rounded ${
                  activeTab === tab.id
                    ? 'bg-terminal-green text-terminal-black'
                    : 'text-terminal-green hover:bg-terminal-green/10'
                }`}
              >
                <span className="mr-2">{tab.icon}</span>
                {tab.label}
              </button>
            ))}
          </div>

          {/* Tab Content */}
          <AnimatePresence mode="wait">
            {/* Outbound Transfer Tab */}
            {activeTab === 'outbound' && (
              <motion.div
                key="outbound"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                transition={{ duration: 0.3 }}
                className="grid grid-cols-1 lg:grid-cols-2 gap-6"
              >
                {/* Outbound Transfer Form */}
                <div className="bg-terminal-gray/10 border border-terminal-green/30 rounded-lg p-6">
                  <h3 className="text-lg font-bold mb-4 text-glow">
                    🚀 Initiate Outbound Transfer
                  </h3>

                  <div className="space-y-4">
                    {/* Target Chain Selection */}
                    <div>
                      <label className="block text-sm font-bold mb-2">Target Chain</label>
                      <select
                        value={outboundForm.chainId}
                        onChange={(e) => setOutboundForm(prev => ({ ...prev, chainId: e.target.value }))}
                        className="w-full bg-terminal-black border border-terminal-green/30 rounded px-3 py-2
                                 text-terminal-green focus:border-terminal-green focus:outline-none"
                      >
                        <option value="">Select target chain...</option>
                        {routerState?.chain_connections.map((connection) => (
                          <option key={connection.chain_id.toString()} value={connection.chain_id.toString()}>
                            {getChainIcon(connection.chain_id)} {getChainName(connection.chain_id)}
                            (ID: {connection.chain_id.toString()})
                          </option>
                        ))}
                      </select>
                    </div>

                    {/* Asset Type */}
                    <div>
                      <label className="block text-sm font-bold mb-2">Asset Type</label>
                      <select
                        value={outboundForm.assetType}
                        onChange={(e) => setOutboundForm(prev => ({ ...prev, assetType: e.target.value as 'ADA' | 'TOKEN' }))}
                        className="w-full bg-terminal-black border border-terminal-green/30 rounded px-3 py-2
                                 text-terminal-green focus:border-terminal-green focus:outline-none"
                      >
                        <option value="ADA">ADA</option>
                        <option value="TOKEN">TOKEN</option>
                      </select>
                    </div>

                    {/* Token Details (if TOKEN selected) */}
                    {outboundForm.assetType === 'TOKEN' && (
                      <>
                        <div>
                          <label className="block text-sm font-bold mb-2">Token Policy ID</label>
                          <input
                            type="text"
                            value={outboundForm.tokenPolicy || ''}
                            onChange={(e) => setOutboundForm(prev => ({ ...prev, tokenPolicy: e.target.value }))}
                            placeholder="Enter token policy ID..."
                            className="w-full bg-terminal-black border border-terminal-green/30 rounded px-3 py-2
                                     text-terminal-green focus:border-terminal-green focus:outline-none"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-bold mb-2">Token Name</label>
                          <input
                            type="text"
                            value={outboundForm.tokenName || ''}
                            onChange={(e) => setOutboundForm(prev => ({ ...prev, tokenName: e.target.value }))}
                            placeholder="Enter token name..."
                            className="w-full bg-terminal-black border border-terminal-green/30 rounded px-3 py-2
                                     text-terminal-green focus:border-terminal-green focus:outline-none"
                          />
                        </div>
                      </>
                    )}

                    {/* Amount */}
                    <div>
                      <label className="block text-sm font-bold mb-2">
                        Amount ({outboundForm.assetType})
                      </label>
                      <input
                        type="number"
                        value={outboundForm.amount}
                        onChange={(e) => setOutboundForm(prev => ({ ...prev, amount: e.target.value }))}
                        placeholder="Enter amount..."
                        step="0.000001"
                        min="0"
                        className="w-full bg-terminal-black border border-terminal-green/30 rounded px-3 py-2
                                 text-terminal-green focus:border-terminal-green focus:outline-none"
                      />
                    </div>

                    {/* Recipient Address */}
                    <div>
                      <label className="block text-sm font-bold mb-2">Recipient Address</label>
                      <input
                        type="text"
                        value={outboundForm.recipientAddress}
                        onChange={(e) => setOutboundForm(prev => ({ ...prev, recipientAddress: e.target.value }))}
                        placeholder="Enter recipient address on target chain..."
                        className="w-full bg-terminal-black border border-terminal-green/30 rounded px-3 py-2
                                 text-terminal-green focus:border-terminal-green focus:outline-none"
                      />
                    </div>

                    {/* Submit Button */}
                    <button
                      onClick={handleOutboundTransfer}
                      disabled={outboundTx.isSubmitting || !outboundForm.chainId || !outboundForm.amount || !outboundForm.recipientAddress}
                      className="w-full bg-terminal-green text-terminal-black py-3 rounded font-bold
                               hover:bg-terminal-green/90 transition-all duration-300 disabled:opacity-50"
                    >
                      {outboundTx.isSubmitting ? 'INITIATING TRANSFER...' : 'INITIATE OUTBOUND TRANSFER'}
                    </button>
                  </div>
                </div>

                {/* Transaction Status */}
                <div className="bg-terminal-gray/10 border border-terminal-green/30 rounded-lg p-6">
                  <h3 className="text-lg font-bold mb-4 text-glow">
                    📋 Transaction Status
                  </h3>

                  {/* Outbound Transaction Status */}
                  <div className="mb-6">
                    <h4 className="font-bold mb-2">Outbound Transfer</h4>
                    <div className="space-y-2">
                      <div className="flex justify-between">
                        <span>Status:</span>
                        <span className={`font-bold ${
                          outboundTx.status === 'success' ? 'text-green-400' :
                          outboundTx.status === 'error' ? 'text-red-400' :
                          outboundTx.status === 'pending' ? 'text-yellow-400' :
                          'text-terminal-green/70'
                        }`}>
                          {outboundTx.status.toUpperCase()}
                        </span>
                      </div>
                      {outboundTx.txHash && (
                        <div className="flex justify-between">
                          <span>TX Hash:</span>
                          <span className="text-terminal-amber font-mono text-sm">
                            {outboundTx.txHash.slice(0, 8)}...{outboundTx.txHash.slice(-8)}
                          </span>
                        </div>
                      )}
                      {outboundTx.error && (
                        <div className="text-red-400 text-sm mt-2">
                          Error: {outboundTx.error}
                        </div>
                      )}
                    </div>
                  </div>

                  {/* Wallet Info */}
                  <div className="border-t border-terminal-green/30 pt-4">
                    <h4 className="font-bold mb-2">Wallet Info</h4>
                    <div className="space-y-1 text-sm">
                      <div className="flex justify-between">
                        <span>Address:</span>
                        <span className="text-terminal-amber font-mono">
                          {walletAddress ? `${walletAddress.slice(0, 8)}...${walletAddress.slice(-8)}` : 'N/A'}
                        </span>
                      </div>
                      <div className="flex justify-between">
                        <span>Status:</span>
                        <span className="text-green-400 font-bold">CONNECTED</span>
                      </div>
                    </div>
                  </div>
                </div>
              </motion.div>
            )}

            {/* Inbound Transfer Tab */}
            {activeTab === 'inbound' && (
              <motion.div
                key="inbound"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                transition={{ duration: 0.3 }}
                className="grid grid-cols-1 lg:grid-cols-2 gap-6"
              >
                {/* Inbound Transfer Form */}
                <div className="bg-terminal-gray/10 border border-terminal-green/30 rounded-lg p-6">
                  <h3 className="text-lg font-bold mb-4 text-glow">
                    📥 Finalize Inbound Transfer
                  </h3>
                  <p className="text-terminal-green/70 text-sm mb-4">
                    ⚠️ Admin/Bridge Operator Action Only
                  </p>

                  <div className="space-y-4">
                    {/* Source Chain */}
                    <div>
                      <label className="block text-sm font-bold mb-2">Source Chain ID</label>
                      <input
                        type="number"
                        value={inboundForm.chainId}
                        onChange={(e) => setInboundForm(prev => ({ ...prev, chainId: e.target.value }))}
                        placeholder="Enter source chain ID..."
                        className="w-full bg-terminal-black border border-terminal-green/30 rounded px-3 py-2
                                 text-terminal-green focus:border-terminal-green focus:outline-none"
                      />
                    </div>

                    {/* Nonce */}
                    <div>
                      <label className="block text-sm font-bold mb-2">Nonce</label>
                      <input
                        type="number"
                        value={inboundForm.nonce}
                        onChange={(e) => setInboundForm(prev => ({ ...prev, nonce: e.target.value }))}
                        placeholder="Enter transfer nonce..."
                        className="w-full bg-terminal-black border border-terminal-green/30 rounded px-3 py-2
                                 text-terminal-green focus:border-terminal-green focus:outline-none"
                      />
                    </div>

                    {/* Bridge Signature */}
                    <div>
                      <label className="block text-sm font-bold mb-2">Bridge Signature</label>
                      <textarea
                        value={inboundForm.bridgeSignature}
                        onChange={(e) => setInboundForm(prev => ({ ...prev, bridgeSignature: e.target.value }))}
                        placeholder="Enter bridge signature..."
                        rows={3}
                        className="w-full bg-terminal-black border border-terminal-green/30 rounded px-3 py-2
                                 text-terminal-green focus:border-terminal-green focus:outline-none resize-none"
                      />
                    </div>

                    {/* Asset Type */}
                    <div>
                      <label className="block text-sm font-bold mb-2">Asset Type</label>
                      <select
                        value={inboundForm.assetType}
                        onChange={(e) => setInboundForm(prev => ({ ...prev, assetType: e.target.value as 'ADA' | 'TOKEN' }))}
                        className="w-full bg-terminal-black border border-terminal-green/30 rounded px-3 py-2
                                 text-terminal-green focus:border-terminal-green focus:outline-none"
                      >
                        <option value="ADA">ADA</option>
                        <option value="TOKEN">TOKEN</option>
                      </select>
                    </div>

                    {/* Token Details (if TOKEN selected) */}
                    {inboundForm.assetType === 'TOKEN' && (
                      <>
                        <div>
                          <label className="block text-sm font-bold mb-2">Token Policy ID</label>
                          <input
                            type="text"
                            value={inboundForm.tokenPolicy || ''}
                            onChange={(e) => setInboundForm(prev => ({ ...prev, tokenPolicy: e.target.value }))}
                            placeholder="Enter token policy ID..."
                            className="w-full bg-terminal-black border border-terminal-green/30 rounded px-3 py-2
                                     text-terminal-green focus:border-terminal-green focus:outline-none"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-bold mb-2">Token Name</label>
                          <input
                            type="text"
                            value={inboundForm.tokenName || ''}
                            onChange={(e) => setInboundForm(prev => ({ ...prev, tokenName: e.target.value }))}
                            placeholder="Enter token name..."
                            className="w-full bg-terminal-black border border-terminal-green/30 rounded px-3 py-2
                                     text-terminal-green focus:border-terminal-green focus:outline-none"
                          />
                        </div>
                      </>
                    )}

                    {/* Amount */}
                    <div>
                      <label className="block text-sm font-bold mb-2">
                        Amount ({inboundForm.assetType})
                      </label>
                      <input
                        type="number"
                        value={inboundForm.amount}
                        onChange={(e) => setInboundForm(prev => ({ ...prev, amount: e.target.value }))}
                        placeholder="Enter amount..."
                        step="0.000001"
                        min="0"
                        className="w-full bg-terminal-black border border-terminal-green/30 rounded px-3 py-2
                                 text-terminal-green focus:border-terminal-green focus:outline-none"
                      />
                    </div>

                    {/* Recipient Address */}
                    <div>
                      <label className="block text-sm font-bold mb-2">Recipient Address (Cardano)</label>
                      <input
                        type="text"
                        value={inboundForm.recipientAddress}
                        onChange={(e) => setInboundForm(prev => ({ ...prev, recipientAddress: e.target.value }))}
                        placeholder="Enter Cardano recipient address..."
                        className="w-full bg-terminal-black border border-terminal-green/30 rounded px-3 py-2
                                 text-terminal-green focus:border-terminal-green focus:outline-none"
                      />
                    </div>

                    {/* Submit Button */}
                    <button
                      onClick={handleInboundTransfer}
                      disabled={inboundTx.isSubmitting || !inboundForm.chainId || !inboundForm.nonce ||
                               !inboundForm.bridgeSignature || !inboundForm.amount || !inboundForm.recipientAddress}
                      className="w-full bg-terminal-amber text-terminal-black py-3 rounded font-bold
                               hover:bg-terminal-amber/90 transition-all duration-300 disabled:opacity-50"
                    >
                      {inboundTx.isSubmitting ? 'FINALIZING TRANSFER...' : 'FINALIZE INBOUND TRANSFER'}
                    </button>
                  </div>
                </div>

                {/* Inbound Transaction Status */}
                <div className="bg-terminal-gray/10 border border-terminal-green/30 rounded-lg p-6">
                  <h3 className="text-lg font-bold mb-4 text-glow">
                    📋 Inbound Transaction Status
                  </h3>

                  <div className="space-y-2">
                    <div className="flex justify-between">
                      <span>Status:</span>
                      <span className={`font-bold ${
                        inboundTx.status === 'success' ? 'text-green-400' :
                        inboundTx.status === 'error' ? 'text-red-400' :
                        inboundTx.status === 'pending' ? 'text-yellow-400' :
                        'text-terminal-green/70'
                      }`}>
                        {inboundTx.status.toUpperCase()}
                      </span>
                    </div>
                    {inboundTx.txHash && (
                      <div className="flex justify-between">
                        <span>TX Hash:</span>
                        <span className="text-terminal-amber font-mono text-sm">
                          {inboundTx.txHash.slice(0, 8)}...{inboundTx.txHash.slice(-8)}
                        </span>
                      </div>
                    )}
                    {inboundTx.error && (
                      <div className="text-red-400 text-sm mt-2">
                        Error: {inboundTx.error}
                      </div>
                    )}
                  </div>

                  {/* Bridge Operator Info */}
                  <div className="border-t border-terminal-green/30 pt-4 mt-4">
                    <h4 className="font-bold mb-2">Bridge Operator</h4>
                    <div className="space-y-1 text-sm">
                      <div className="flex justify-between">
                        <span>Address:</span>
                        <span className="text-terminal-amber font-mono">
                          {walletAddress ? `${walletAddress.slice(0, 8)}...${walletAddress.slice(-8)}` : 'N/A'}
                        </span>
                      </div>
                      <div className="flex justify-between">
                        <span>Role:</span>
                        <span className="text-yellow-400 font-bold">BRIDGE_OPERATOR</span>
                      </div>
                    </div>
                  </div>
                </div>
              </motion.div>
            )}

            {/* Router Status Tab */}
            {activeTab === 'status' && (
              <motion.div
                key="status"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                transition={{ duration: 0.3 }}
                className="space-y-6"
              >
                {/* Router State Overview */}
                <div className="bg-terminal-gray/10 border border-terminal-green/30 rounded-lg p-6">
                  <h3 className="text-lg font-bold mb-4 text-glow">
                    📊 Router State Overview
                  </h3>

                  {routerState ? (
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                      <div className="text-center">
                        <div className="text-2xl font-bold text-terminal-amber mb-2">
                          {formatADA(Number(routerState.total_volume) / 1_000_000)}
                        </div>
                        <div className="text-terminal-green/70">Total Volume</div>
                      </div>
                      <div className="text-center">
                        <div className="text-2xl font-bold text-terminal-amber mb-2">
                          {formatNumber(Number(routerState.last_processed_nonce))}
                        </div>
                        <div className="text-terminal-green/70">Last Processed Nonce</div>
                      </div>
                      <div className="text-center">
                        <div className="text-2xl font-bold text-terminal-amber mb-2">
                          {routerState.chain_connections.length}
                        </div>
                        <div className="text-terminal-green/70">Connected Chains</div>
                      </div>
                    </div>
                  ) : (
                    <div className="text-center text-terminal-green/70">
                      No router state data available
                    </div>
                  )}
                </div>

                {/* Chain Connections */}
                <div className="bg-terminal-gray/10 border border-terminal-green/30 rounded-lg p-6">
                  <h3 className="text-lg font-bold mb-4 text-glow">
                    🌐 Chain Connections
                  </h3>

                  {routerState?.chain_connections.length ? (
                    <div className="space-y-4">
                      {routerState.chain_connections.map((connection) => (
                        <div
                          key={connection.chain_id.toString()}
                          className="bg-terminal-black/50 border border-terminal-green/20 rounded p-4"
                        >
                          <div className="flex items-center justify-between">
                            <div className="flex items-center space-x-3">
                              <span className="text-2xl">{getChainIcon(connection.chain_id)}</span>
                              <div>
                                <div className="font-bold text-terminal-green">
                                  {getChainName(connection.chain_id)}
                                </div>
                                <div className="text-sm text-terminal-green/70">
                                  Chain ID: {connection.chain_id.toString()}
                                </div>
                              </div>
                            </div>
                            <div className="text-right">
                              <div className="text-sm text-terminal-green/70">Bridge Address</div>
                              <div className="font-mono text-terminal-amber text-sm">
                                {connection.bridge_address.slice(0, 8)}...{connection.bridge_address.slice(-8)}
                              </div>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  ) : (
                    <div className="text-center text-terminal-green/70">
                      No chain connections available
                    </div>
                  )}
                </div>

                {/* Real-time Monitor Status */}
                <div className="bg-terminal-gray/10 border border-terminal-green/30 rounded-lg p-6">
                  <h3 className="text-lg font-bold mb-4 text-glow">
                    📡 Monitor Status
                  </h3>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                      <h4 className="font-bold mb-2">Connection Status</h4>
                      <div className="space-y-2 text-sm">
                        <div className="flex justify-between">
                          <span>Wallet:</span>
                          <span className="text-green-400 font-bold">CONNECTED</span>
                        </div>
                        <div className="flex justify-between">
                          <span>Router Builder:</span>
                          <span className={`font-bold ${routerBuilder ? 'text-green-400' : 'text-red-400'}`}>
                            {routerBuilder ? 'ACTIVE' : 'INACTIVE'}
                          </span>
                        </div>
                        <div className="flex justify-between">
                          <span>Real-time Monitor:</span>
                          <span className={`font-bold ${routerMonitor ? 'text-green-400' : 'text-red-400'}`}>
                            {routerMonitor ? 'MONITORING' : 'OFFLINE'}
                          </span>
                        </div>
                        <div className="flex justify-between">
                          <span>Demo Mode:</span>
                          <span className={`font-bold ${isDemoMode ? 'text-yellow-400' : 'text-green-400'}`}>
                            {isDemoMode ? 'ENABLED' : 'DISABLED'}
                          </span>
                        </div>
                      </div>
                    </div>

                    <div>
                      <h4 className="font-bold mb-2">Network Info</h4>
                      <div className="space-y-2 text-sm">
                        <div className="flex justify-between">
                          <span>Network:</span>
                          <span className="text-terminal-amber font-bold">
                            {isDemoMode ? 'DEMO' : 'PREPROD'}
                          </span>
                        </div>
                        <div className="flex justify-between">
                          <span>Environment:</span>
                          <span className="text-terminal-amber font-bold">
                            {process.env.NODE_ENV?.toUpperCase() || 'DEVELOPMENT'}
                          </span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </motion.div>
            )}
          </AnimatePresence>
        </div>
      )}
    </div>
  );
}
