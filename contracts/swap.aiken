// PuckSwap v5 AMM Swap Validator
// Production-ready validator for Cardano preprod testnet deployment
// Implements constant product AMM (x * y = k) with configurable fees

use aiken/transaction.{ScriptContext, Spend, OutputReference, Input, Output, Finite}
use aiken/transaction/credential.{Address}
use aiken/transaction/value.{Value, PolicyId, AssetName, ada_policy_id, ada_asset_name, quantity_of}
use aiken/option.{Option, Some, None}
use aiken/list

// =============================================================================
// DATUM AND REDEEMER STRUCTURES
// =============================================================================

// Exact PoolDatum Structure matching deployed contract
pub type PoolDatum {
  pool_nft_policy: PolicyId,
  pool_nft_name: AssetName,
  token_policy: PolicyId,
  token_name: AssetName,
  ada_reserve: Int,
  token_reserve: Int,
  lp_total_supply: Int,
  fee_bps: Int,
}

// Swap Redeemer with MEV protection
pub type SwapRedeemer {
  swap_in_token: Bool,    // true = token->ADA, false = ADA->token
  amount_in: Int,         // Input amount
  min_out: Int,           // Minimum output (slippage protection)
  deadline: Int,          // Slot deadline for MEV protection
  recipient: Address,     // Where to send output tokens
}

// =============================================================================
// MAIN VALIDATOR
// =============================================================================

validator swap(datum: PoolDatum, redeemer: SwapRedeemer, ctx: ScriptContext) -> Bool {
  when ctx.purpose is {
    Spend(output_ref) -> {
      // Basic parameter validations
      expect redeemer.amount_in > 0
      expect redeemer.min_out >= 0
      expect datum.ada_reserve > 0
      expect datum.token_reserve > 0
      expect datum.lp_total_supply > 0
      expect datum.fee_bps >= 0 && datum.fee_bps <= 1000  // Max 10% fee
      
      // Find pool input and output UTxOs
      expect Some(pool_input) = find_pool_input(ctx.transaction.inputs, output_ref)
      expect Some(pool_output) = find_pool_output(ctx.transaction.outputs, pool_input.output.address)
      
      // Validate deadline hasn't passed
      expect validate_deadline(redeemer.deadline, ctx)
      
      // Extract and validate current reserves
      let (current_ada_reserve, current_token_reserve) = 
        extract_pool_reserves(pool_input.output.value, datum)
      
      expect current_ada_reserve == datum.ada_reserve
      expect current_token_reserve == datum.token_reserve
      
      // Calculate swap output using constant product formula
      let output_amount = calculate_swap_output(
        datum.ada_reserve,
        datum.token_reserve,
        redeemer.amount_in,
        redeemer.swap_in_token,
        datum.fee_bps
      )
      
      // Validate slippage protection
      expect output_amount >= redeemer.min_out
      
      // Validate minimum ADA requirements
      expect validate_min_ada_requirement(pool_output)
      
      // Validate pool NFT preservation
      expect validate_pool_nft_preservation(pool_input, pool_output, datum)
      
      True
    }
    _ -> False
  }
}

// =============================================================================
// HELPER FUNCTIONS
// =============================================================================

fn find_pool_input(inputs: List<Input>, output_ref: OutputReference) -> Option<Input> {
  list.find(inputs, fn(input) { input.output_reference == output_ref })
}

fn find_pool_output(outputs: List<Output>, pool_address: Address) -> Option<Output> {
  list.find(outputs, fn(output) { output.address == pool_address })
}

fn extract_pool_reserves(pool_value: Value, datum: PoolDatum) -> (Int, Int) {
  let ada_amount = quantity_of(pool_value, ada_policy_id(), ada_asset_name())
  let token_amount = quantity_of(pool_value, datum.token_policy, datum.token_name)
  (ada_amount, token_amount)
}

fn validate_deadline(deadline: Int, ctx: ScriptContext) -> Bool {
  when ctx.transaction.validity_range.upper_bound.bound_type is {
    Finite(upper_bound) -> deadline >= upper_bound
    _ -> True  // No upper bound set, deadline check passes
  }
}

fn validate_min_ada_requirement(pool_output: Output) -> Bool {
  let ada_amount = quantity_of(pool_output.value, ada_policy_id(), ada_asset_name())
  // Ensure minimum 2 ADA remains in pool UTxO
  ada_amount >= 2_000_000
}

fn validate_pool_nft_preservation(
  pool_input: Input,
  pool_output: Output,
  datum: PoolDatum
) -> Bool {
  // Ensure pool NFT is preserved in the transaction
  let input_nft_amount = quantity_of(pool_input.output.value, datum.pool_nft_policy, datum.pool_nft_name)
  let output_nft_amount = quantity_of(pool_output.value, datum.pool_nft_policy, datum.pool_nft_name)
  
  expect input_nft_amount == 1
  expect output_nft_amount == 1
  
  True
}

// =============================================================================
// CONSTANT PRODUCT AMM CALCULATION
// =============================================================================

fn calculate_swap_output(
  ada_reserve: Int,
  token_reserve: Int,
  amount_in: Int,
  swap_in_token: Bool,
  fee_bps: Int
) -> Int {
  // Calculate fee using basis points (e.g., 30 bps = 0.3%)
  let fee_denominator = 10000
  let fee_numerator = fee_denominator - fee_bps
  let amount_in_with_fee = amount_in * fee_numerator
  
  if swap_in_token {
    // Token -> ADA swap
    // Formula: (amount_in_with_fee * ada_reserve) / (token_reserve * 10000 + amount_in_with_fee)
    let numerator = amount_in_with_fee * ada_reserve
    let denominator = (token_reserve * fee_denominator) + amount_in_with_fee
    numerator / denominator
  } else {
    // ADA -> Token swap
    // Formula: (amount_in_with_fee * token_reserve) / (ada_reserve * 10000 + amount_in_with_fee)
    let numerator = amount_in_with_fee * token_reserve
    let denominator = (ada_reserve * fee_denominator) + amount_in_with_fee
    numerator / denominator
  }
}

// =============================================================================
// TESTS
// =============================================================================

test test_swap_calculation() {
  // Test ADA -> Token swap with 0.3% fee (30 bps)
  let ada_reserve = 100_000_000_000  // 100,000 ADA
  let token_reserve = 2_301_952_000_000  // 2,301,952 PUKKY
  let amount_in = 1_000_000  // 1 ADA
  let fee_bps = 30  // 0.3%
  
  let output = calculate_swap_output(ada_reserve, token_reserve, amount_in, False, fee_bps)
  
  // Should receive approximately 22.9 PUKKY (accounting for fee and slippage)
  expect output > 22_000_000  // At least 22 PUKKY
  expect output < 25_000_000  // Less than 25 PUKKY
  
  True
}

test test_reverse_swap_calculation() {
  // Test Token -> ADA swap
  let ada_reserve = 100_000_000_000  // 100,000 ADA
  let token_reserve = 2_301_952_000_000  // 2,301,952 PUKKY
  let amount_in = 23_019_520  // ~23 PUKKY
  let fee_bps = 30  // 0.3%
  
  let output = calculate_swap_output(ada_reserve, token_reserve, amount_in, True, fee_bps)
  
  // Should receive approximately 0.99 ADA (accounting for fee)
  expect output > 900_000  // At least 0.9 ADA
  expect output < 1_000_000  // Less than 1 ADA
  
  True
}
