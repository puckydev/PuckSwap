// PuckSwap v5 - Swap Validator Integration Test
// Tests the complete AMM swap validator with real PoolDatum structure
// Validates integration with deployed Cardano preprod contracts

use aiken/transaction.{ScriptContext, Spend, Transaction, Input, Output, OutputReference}
use aiken/transaction/credential.{Address, VerificationKeyCredential}
use aiken/transaction/value.{Value, PolicyId, AssetName, ada_policy_id, ada_asset_name, from_lovelace, tokens, merge}
use aiken/list
use aiken/math
use aiken/bytearray

// Import the updated swap validator
use validators/swap_validator.{PoolDatum, SwapRedeemer, SwapResult, calculate_constant_product_swap, swap_validator}

// =============================================================================
// TEST DATA SETUP
// =============================================================================

// Test pool datum matching deployed contract structure
fn create_test_pool_datum() -> PoolDatum {
  PoolDatum {
    pool_nft_policy: #"ad524e5497fdf1f924de936f9f7ec31d460c02267e8acce544a5a09e",
    pool_nft_name: #"50554b4b59504f4f4c",  // "PUKKYPOOL" in hex
    token_policy: #"eb031002fa1dbc400bbb5314a63741c8bf8524106fe7b50cafbcc113",
    token_name: #"50554b4b59",  // "PUKKY" in hex
    ada_reserve: 100_000_000_000,  // 100,000 ADA
    token_reserve: 2_301_952_000_000,  // 2,301,952 PUKKY (100 ADA = 2,301,952 PUKKY)
    lp_total_supply: 1_000_000_000,  // 1,000 LP tokens
    fee_bps: 30,  // 0.3% fee
  }
}

// Test swap redeemer for ADA -> PUKKY swap
fn create_test_swap_redeemer() -> SwapRedeemer {
  SwapRedeemer {
    swap_in_token: False,  // ADA -> PUKKY
    amount_in: 1_000_000,  // 1 ADA
    min_out: 22_000_000,   // Minimum ~22 PUKKY (with slippage)
    deadline: 1000000,     // Future slot
    recipient: VerificationKeyCredential(#"abcd1234"),  // Test address
  }
}

// =============================================================================
// CONSTANT PRODUCT AMM TESTS
// =============================================================================

test test_constant_product_calculation() {
  let pool_datum = create_test_pool_datum()
  let swap_redeemer = create_test_swap_redeemer()
  
  // Test ADA -> PUKKY swap calculation
  let swap_result = calculate_constant_product_swap(
    pool_datum.ada_reserve,
    pool_datum.token_reserve,
    swap_redeemer.amount_in,
    swap_redeemer.swap_in_token,
    pool_datum.fee_bps
  )
  
  // Validate swap result
  expect swap_result.output_amount > 0
  expect swap_result.output_amount >= swap_redeemer.min_out
  expect swap_result.new_ada_reserve == pool_datum.ada_reserve + swap_redeemer.amount_in
  expect swap_result.new_token_reserve == pool_datum.token_reserve - swap_result.output_amount
  expect swap_result.fee_amount > 0
  expect swap_result.price_impact_bps >= 0
  
  // Validate constant product formula (accounting for fees)
  let original_product = pool_datum.ada_reserve * pool_datum.token_reserve
  let new_product = swap_result.new_ada_reserve * swap_result.new_token_reserve
  expect new_product >= original_product  // Should increase due to fees
  
  True
}

test test_reverse_swap_calculation() {
  let pool_datum = create_test_pool_datum()
  
  // Test PUKKY -> ADA swap
  let reverse_redeemer = SwapRedeemer {
    swap_in_token: True,   // PUKKY -> ADA
    amount_in: 23_019_520, // ~23 PUKKY
    min_out: 900_000,      // Minimum ~0.9 ADA (with slippage)
    deadline: 1000000,
    recipient: VerificationKeyCredential(#"abcd1234"),
  }
  
  let swap_result = calculate_constant_product_swap(
    pool_datum.ada_reserve,
    pool_datum.token_reserve,
    reverse_redeemer.amount_in,
    reverse_redeemer.swap_in_token,
    pool_datum.fee_bps
  )
  
  // Validate reverse swap result
  expect swap_result.output_amount > 0
  expect swap_result.output_amount >= reverse_redeemer.min_out
  expect swap_result.new_ada_reserve == pool_datum.ada_reserve - swap_result.output_amount
  expect swap_result.new_token_reserve == pool_datum.token_reserve + reverse_redeemer.amount_in
  
  True
}

// =============================================================================
// FEE CALCULATION TESTS
// =============================================================================

test test_fee_calculation() {
  let pool_datum = create_test_pool_datum()
  let amount_in = 1_000_000  // 1 ADA
  
  // Test with 0.3% fee (30 bps)
  let swap_result = calculate_constant_product_swap(
    pool_datum.ada_reserve,
    pool_datum.token_reserve,
    amount_in,
    False,  // ADA -> PUKKY
    30      // 0.3% fee
  )
  
  // Fee should be 0.3% of input amount
  let expected_fee = amount_in * 30 / 10000  // 3000 lovelace
  expect swap_result.fee_amount == expected_fee
  
  // Test with different fee (1% = 100 bps)
  let high_fee_result = calculate_constant_product_swap(
    pool_datum.ada_reserve,
    pool_datum.token_reserve,
    amount_in,
    False,
    100     // 1% fee
  )
  
  let expected_high_fee = amount_in * 100 / 10000  // 10000 lovelace
  expect high_fee_result.fee_amount == expected_high_fee
  expect high_fee_result.output_amount < swap_result.output_amount  // Higher fee = less output
  
  True
}

// =============================================================================
// PRICE IMPACT TESTS
// =============================================================================

test test_price_impact_calculation() {
  let pool_datum = create_test_pool_datum()
  
  // Small swap - should have minimal price impact
  let small_swap = calculate_constant_product_swap(
    pool_datum.ada_reserve,
    pool_datum.token_reserve,
    100_000,  // 0.1 ADA
    False,
    pool_datum.fee_bps
  )
  
  // Large swap - should have higher price impact
  let large_swap = calculate_constant_product_swap(
    pool_datum.ada_reserve,
    pool_datum.token_reserve,
    10_000_000_000,  // 10,000 ADA
    False,
    pool_datum.fee_bps
  )
  
  // Large swap should have higher price impact
  expect large_swap.price_impact_bps > small_swap.price_impact_bps
  expect small_swap.price_impact_bps < 100  // Less than 1% for small swap
  
  True
}

// =============================================================================
// POOL DRAINING PROTECTION TESTS
// =============================================================================

test test_pool_draining_protection() {
  let pool_datum = create_test_pool_datum()
  
  // Attempt to drain most of the pool
  let drain_attempt = calculate_constant_product_swap(
    pool_datum.ada_reserve,
    pool_datum.token_reserve,
    90_000_000_000,  // 90,000 ADA (90% of pool)
    False,
    pool_datum.fee_bps
  )
  
  // Should still leave minimum reserves
  expect drain_attempt.new_ada_reserve >= 1_000_000  // At least 1 ADA
  expect drain_attempt.new_token_reserve >= 1_000_000  // At least 1 token
  
  // Constant product should be maintained
  let original_product = pool_datum.ada_reserve * pool_datum.token_reserve
  let new_product = drain_attempt.new_ada_reserve * drain_attempt.new_token_reserve
  expect new_product >= original_product
  
  True
}

// =============================================================================
// INTEGRATION WITH DEPLOYED CONTRACT ADDRESSES
// =============================================================================

test test_deployed_contract_compatibility() {
  // Test that our PoolDatum structure matches deployed contract expectations
  let pool_datum = create_test_pool_datum()
  
  // Validate deployed contract addresses from deployment/addresses.json
  expect pool_datum.pool_nft_policy == #"ad524e5497fdf1f924de936f9f7ec31d460c02267e8acce544a5a09e"
  expect pool_datum.token_policy == #"eb031002fa1dbc400bbb5314a63741c8bf8524106fe7b50cafbcc113"
  
  // Validate realistic pool parameters
  expect pool_datum.ada_reserve > 0
  expect pool_datum.token_reserve > 0
  expect pool_datum.lp_total_supply > 0
  expect pool_datum.fee_bps >= 0 && pool_datum.fee_bps <= 1000  // Max 10% fee
  
  // Test standard 100 ADA = 2,301,952 PUCKY price point
  let price_ratio = pool_datum.token_reserve / pool_datum.ada_reserve
  expect price_ratio > 20  // Should be around 23 PUKKY per ADA
  
  True
}
