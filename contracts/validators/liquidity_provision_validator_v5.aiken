use aiken/transaction.{ScriptContext, Spend, Transaction, Input, Output, OutputReference, Finite, PosInfinity}
use aiken/transaction/credential.{Address, VerificationKeyCredential, ScriptCredential}
use aiken/transaction/value.{Value, PolicyId, AssetName, ada_policy_id, ada_asset_name, quantity_of, to_dict}
use aiken/list
use aiken/math
use aiken/bytearray
use aiken/dict
use aiken/cbor

// Import shared types and utilities
use puckswap/lib/cip68_types.{PoolCIP68Datum, PoolState, PoolConfig, PoolStats, CIP68Metadata}
use puckswap/lib/min_ada_utils.{validate_min_ada_output, calculate_pool_min_ada}
use puckswap/lib/value_utils.{get_ada_quantity, get_asset_quantity, find_input, find_output}
use puckswap/lib/liquidity_utils.{calculate_lp_tokens_to_mint, validate_liquidity_ratio}

// =============================================================================
// LIQUIDITY PROVISION VALIDATOR V5 - COMPREHENSIVE IMPLEMENTATION
// =============================================================================
// 
// Features:
// - Balanced liquidity provision (ADA + token deposits)
// - Proportional LP token minting via separate policy
// - CIP-68 pool datum updates with new reserves
// - Unbalanced liquidity prevention
// - Minimum ADA compliance validation
// - Comprehensive security validations
// =============================================================================

// Enhanced liquidity provision redeemer
pub type LiquidityProvisionRedeemer {
  ada_amount: Int,              // ADA amount to deposit
  token_amount: Int,            // Token amount to deposit
  min_lp_tokens: Int,           // Minimum LP tokens to receive (slippage protection)
  max_ratio_deviation_bps: Int, // Maximum allowed ratio deviation (basis points)
  deadline_slot: Int,           // Transaction deadline for MEV protection
  user_address: Address,        // User address for validation
  is_initial_liquidity: Bool,   // Whether this is the first liquidity provision
}

// Liquidity provision result
pub type LiquidityProvisionResult {
  lp_tokens_to_mint: Int,
  new_ada_reserve: Int,
  new_token_reserve: Int,
  new_total_lp_supply: Int,
  ada_ratio: Int,
  token_ratio: Int,
  effective_ratio: Int,
}

// Liquidity validation result
pub type LiquidityValidation {
  is_valid: Bool,
  error_code: LiquidityErrorCode,
  error_message: ByteArray,
}

// Liquidity error codes
pub type LiquidityErrorCode {
  NoError
  UnbalancedLiquidity
  InsufficientLPTokens
  ExcessiveRatioDeviation
  InvalidAmounts
  DeadlineExpired
  UnauthorizedAccess
  MinAdaViolation
  PoolPaused
}

// =============================================================================
// MAIN VALIDATOR
// =============================================================================

// Main liquidity provision validator with comprehensive security
validator liquidity_provision_validator_v5(
  ctx: ScriptContext,
  datum: PoolCIP68Datum,
  redeemer: LiquidityProvisionRedeemer
) -> Bool {
  when ctx.purpose is {
    Spend(output_ref) -> {
      // Find pool input and output UTxOs
      expect Some(pool_input) = find_input(ctx.transaction.inputs, output_ref)
      expect Some(pool_output) = find_output(ctx.transaction.outputs, pool_input.output.address)

      // Validate CIP-68 structure integrity
      expect validate_cip68_structure(datum)

      // Perform comprehensive security validations
      expect validate_liquidity_security_constraints(pool_input, pool_output, datum, redeemer, ctx)

      // Validate and execute the liquidity provision operation
      validate_liquidity_provision_operation(pool_input, pool_output, datum, redeemer, ctx)
    }
    _ -> False
  }
}

// =============================================================================
// CORE LIQUIDITY PROVISION VALIDATION
// =============================================================================

// Validate liquidity provision operation with all security checks
fn validate_liquidity_provision_operation(
  pool_input: Input,
  pool_output: Output,
  datum: PoolCIP68Datum,
  redeemer: LiquidityProvisionRedeemer,
  ctx: ScriptContext
) -> Bool {
  // Extract pool state and configuration
  let pool_state = datum.pool_state
  let pool_config = datum.pool_config
  let pool_stats = datum.pool_stats

  // Validate pool is not paused
  expect !pool_config.is_paused

  // Validate deadline hasn't passed
  expect validate_deadline(redeemer.deadline_slot, ctx)

  // Validate redeemer parameters
  expect validate_redeemer_parameters(redeemer)

  // Get current pool reserves from UTxO values
  let (current_ada_reserve, current_token_reserve) = 
    extract_pool_reserves(pool_input.output.value, pool_config)

  // Validate reserves match datum
  expect current_ada_reserve == pool_state.ada_reserve
  expect current_token_reserve == pool_state.token_reserve

  // Calculate liquidity provision result
  let liquidity_result = calculate_liquidity_provision(
    current_ada_reserve,
    current_token_reserve,
    pool_state.total_lp_supply,
    redeemer.ada_amount,
    redeemer.token_amount,
    redeemer.is_initial_liquidity
  )

  // Validate minimum LP tokens requirement (slippage protection)
  expect liquidity_result.lp_tokens_to_mint >= redeemer.min_lp_tokens

  // Validate liquidity ratio if not initial provision
  if !redeemer.is_initial_liquidity {
    expect validate_liquidity_ratio_balance(
      liquidity_result.ada_ratio,
      liquidity_result.token_ratio,
      redeemer.max_ratio_deviation_bps
    )
  }

  // Get new pool state from output
  expect Some(output_datum_data) = pool_output.datum
  expect new_pool_datum: PoolCIP68Datum = output_datum_data

  // Validate reserves are updated correctly
  expect new_pool_datum.pool_state.ada_reserve == liquidity_result.new_ada_reserve
  expect new_pool_datum.pool_state.token_reserve == liquidity_result.new_token_reserve
  expect new_pool_datum.pool_state.total_lp_supply == liquidity_result.new_total_lp_supply

  // Validate pool reserves in output UTxO match calculated values
  let (output_ada_reserve, output_token_reserve) = 
    extract_pool_reserves(pool_output.value, pool_config)
  
  expect output_ada_reserve == liquidity_result.new_ada_reserve
  expect output_token_reserve == liquidity_result.new_token_reserve

  // Validate minimum ADA requirements are met
  expect validate_min_ada_compliance(pool_output, new_pool_datum)

  // Validate LP token minting
  expect validate_lp_token_minting(liquidity_result.lp_tokens_to_mint, pool_config, ctx)

  // Validate pool statistics are updated correctly
  expect validate_pool_stats_update_liquidity(pool_stats, new_pool_datum.pool_stats, liquidity_result, ctx)

  // Validate user receives correct LP tokens
  expect validate_user_lp_token_output(redeemer, liquidity_result, pool_config, ctx)

  True
}

// =============================================================================
// LIQUIDITY CALCULATION
// =============================================================================

// Calculate liquidity provision with proportional LP token minting
fn calculate_liquidity_provision(
  ada_reserve: Int,
  token_reserve: Int,
  total_lp_supply: Int,
  ada_amount: Int,
  token_amount: Int,
  is_initial: Bool
) -> LiquidityProvisionResult {
  // Validate input parameters
  expect ada_amount > 0
  expect token_amount > 0

  if is_initial {
    // Initial liquidity provision - use geometric mean
    let lp_tokens_to_mint = math.sqrt(ada_amount * token_amount)
    
    LiquidityProvisionResult {
      lp_tokens_to_mint: lp_tokens_to_mint,
      new_ada_reserve: ada_amount,
      new_token_reserve: token_amount,
      new_total_lp_supply: lp_tokens_to_mint,
      ada_ratio: 1000000,  // 100% (scaled by 1e6)
      token_ratio: 1000000, // 100% (scaled by 1e6)
      effective_ratio: 1000000,
    }
  } else {
    // Subsequent liquidity provision - use proportional calculation
    expect ada_reserve > 0
    expect token_reserve > 0
    expect total_lp_supply > 0

    // Calculate ratios (scaled by 1e6 for precision)
    let ada_ratio = ada_amount * 1000000 / ada_reserve
    let token_ratio = token_amount * 1000000 / token_reserve

    // Use minimum ratio to prevent manipulation and ensure balanced liquidity
    let effective_ratio = math.min(ada_ratio, token_ratio)
    let lp_tokens_to_mint = total_lp_supply * effective_ratio / 1000000

    LiquidityProvisionResult {
      lp_tokens_to_mint: lp_tokens_to_mint,
      new_ada_reserve: ada_reserve + ada_amount,
      new_token_reserve: token_reserve + token_amount,
      new_total_lp_supply: total_lp_supply + lp_tokens_to_mint,
      ada_ratio: ada_ratio,
      token_ratio: token_ratio,
      effective_ratio: effective_ratio,
    }
  }
}

// Validate liquidity ratio balance to prevent unbalanced additions
fn validate_liquidity_ratio_balance(
  ada_ratio: Int,
  token_ratio: Int,
  max_deviation_bps: Int
) -> Bool {
  // Calculate ratio difference in basis points
  let ratio_diff = math.abs(ada_ratio - token_ratio)
  let max_ratio = math.max(ada_ratio, token_ratio)
  let deviation_bps = ratio_diff * 10000 / max_ratio

  // Ensure deviation is within acceptable bounds
  deviation_bps <= max_deviation_bps
}

// =============================================================================
// SECURITY VALIDATION FUNCTIONS
// =============================================================================

// Comprehensive security constraint validation for liquidity provision
fn validate_liquidity_security_constraints(
  pool_input: Input,
  pool_output: Output,
  datum: PoolCIP68Datum,
  redeemer: LiquidityProvisionRedeemer,
  ctx: ScriptContext
) -> Bool {
  // Validate pool NFT preservation
  let pool_nft_policy = datum.pool_config.lp_token_policy
  let pool_nft_name = datum.pool_state.pool_nft_name
  
  expect quantity_of(pool_input.output.value, pool_nft_policy, pool_nft_name) == 1
  expect quantity_of(pool_output.value, pool_nft_policy, pool_nft_name) == 1

  // Validate user authorization
  expect validate_user_authorization(redeemer.user_address, ctx)

  // Validate transaction structure
  expect validate_transaction_structure(ctx)

  // Validate against dust attacks
  expect validate_dust_attack_protection(redeemer)

  // Validate liquidity amounts are reasonable
  expect validate_reasonable_liquidity_amounts(redeemer, datum.pool_state)

  True
}

// Validate CIP-68 structure integrity
fn validate_cip68_structure(datum: PoolCIP68Datum) -> Bool {
  // Validate version compatibility
  expect datum.version >= 1

  // Validate metadata structure
  expect validate_metadata_structure(datum.metadata)

  // Validate pool state consistency
  expect datum.pool_state.ada_reserve >= 0
  expect datum.pool_state.token_reserve >= 0
  expect datum.pool_state.total_lp_supply >= 0

  // Validate pool configuration
  expect datum.pool_config.fee_bps >= 0 && datum.pool_config.fee_bps <= 10000
  expect datum.pool_config.protocol_fee_bps >= 0 && datum.pool_config.protocol_fee_bps <= 1000

  True
}

// Validate redeemer parameters
fn validate_redeemer_parameters(redeemer: LiquidityProvisionRedeemer) -> Bool {
  // Validate amounts
  expect redeemer.ada_amount > 0
  expect redeemer.token_amount > 0
  expect redeemer.min_lp_tokens >= 0

  // Validate ratio deviation parameters
  expect redeemer.max_ratio_deviation_bps >= 0 && redeemer.max_ratio_deviation_bps <= 10000

  // Validate deadline is reasonable
  expect redeemer.deadline_slot > 0

  True
}

// Validate deadline hasn't passed
fn validate_deadline(deadline_slot: Int, ctx: ScriptContext) -> Bool {
  when ctx.transaction.validity_range.upper_bound.bound_type is {
    Finite(upper_bound) -> upper_bound <= deadline_slot
    PosInfinity -> True
    _ -> False
  }
}

// Extract pool reserves from UTxO value
fn extract_pool_reserves(pool_value: Value, pool_config: PoolConfig) -> (Int, Int) {
  let ada_amount = get_ada_quantity(pool_value)
  let token_amount = get_asset_quantity(pool_value, pool_config.token_policy, pool_config.token_name)

  // Validate reserves are positive for existing pools
  expect ada_amount >= 0
  expect token_amount >= 0

  (ada_amount, token_amount)
}

// Validate user authorization
fn validate_user_authorization(user_address: Address, ctx: ScriptContext) -> Bool {
  let user_signed = list.any(ctx.transaction.extra_signatories, fn(signature) {
    when user_address.payment_credential is {
      VerificationKeyCredential(pkh) -> signature == pkh
      _ -> False
    }
  })

  expect user_signed

  True
}

// Validate transaction structure
fn validate_transaction_structure(ctx: ScriptContext) -> Bool {
  let tx = ctx.transaction

  // Validate fee is reasonable
  expect tx.fee <= 10_000_000  // Max 10 ADA fee

  // Validate validity range is reasonable
  let validity_range_size = when (tx.validity_range.lower_bound.bound_type, tx.validity_range.upper_bound.bound_type) is {
    (Finite(lower), Finite(upper)) -> upper - lower
    _ -> 0
  }

  // Allow reasonable validity range (up to 2 hours = 7200 slots)
  expect validity_range_size <= 7200

  True
}

// Validate against dust attacks
fn validate_dust_attack_protection(redeemer: LiquidityProvisionRedeemer) -> Bool {
  // Define minimum liquidity amounts to prevent dust attacks
  let min_ada_amount = 1_000_000   // 1 ADA minimum
  let min_token_amount = 1_000_000 // 1 token minimum (adjust based on token decimals)

  expect redeemer.ada_amount >= min_ada_amount
  expect redeemer.token_amount >= min_token_amount

  True
}

// Validate liquidity amounts are reasonable relative to pool size
fn validate_reasonable_liquidity_amounts(
  redeemer: LiquidityProvisionRedeemer,
  pool_state: PoolState
) -> Bool {
  if redeemer.is_initial_liquidity {
    // For initial liquidity, just ensure minimum amounts
    expect redeemer.ada_amount >= 10_000_000   // 10 ADA minimum for initial
    expect redeemer.token_amount >= 1_000_000  // 1 token minimum for initial
  } else {
    // For subsequent liquidity, validate against pool size
    let max_single_provision_percentage = 5000  // 50% of pool reserves
    let max_ada_amount = pool_state.ada_reserve * max_single_provision_percentage / 10000
    let max_token_amount = pool_state.token_reserve * max_single_provision_percentage / 10000

    expect redeemer.ada_amount <= max_ada_amount
    expect redeemer.token_amount <= max_token_amount
  }

  True
}

// Validate metadata structure
fn validate_metadata_structure(metadata: CIP68Metadata) -> Bool {
  // Validate required metadata fields exist
  // This is a simplified validation - in practice would check specific fields
  True
}

// Validate minimum ADA compliance
fn validate_min_ada_compliance(pool_output: Output, datum: PoolCIP68Datum) -> Bool {
  // Calculate required minimum ADA for pool UTxO
  let datum_size = estimate_datum_size(pool_output.datum)
  let required_min_ada = calculate_pool_min_ada(pool_output.value, datum_size, True, 2)
  let actual_ada = get_ada_quantity(pool_output.value)

  expect actual_ada >= required_min_ada

  True
}

// Estimate datum size (simplified)
fn estimate_datum_size(datum: Data) -> Int {
  // Simplified estimation - would use actual CBOR size in production
  600  // Conservative estimate for CIP-68 pool datum with liquidity data
}

// Validate LP token minting
fn validate_lp_token_minting(
  lp_tokens_to_mint: Int,
  pool_config: PoolConfig,
  ctx: ScriptContext
) -> Bool {
  // Get minted tokens from this transaction
  let mint_value = ctx.transaction.mint
  let lp_token_amount = get_asset_quantity(mint_value, pool_config.lp_token_policy, pool_config.lp_token_name)

  // Validate correct amount of LP tokens are being minted
  expect lp_token_amount == lp_tokens_to_mint
  expect lp_tokens_to_mint > 0

  True
}

// Validate pool statistics update for liquidity provision
fn validate_pool_stats_update_liquidity(
  old_stats: PoolStats,
  new_stats: PoolStats,
  liquidity_result: LiquidityProvisionResult,
  ctx: ScriptContext
) -> Bool {
  // Validate liquidity providers count is updated for new providers
  // (This would require additional logic to detect new vs existing providers)
  expect new_stats.liquidity_providers_count >= old_stats.liquidity_providers_count

  // Validate last interaction slot is updated
  let current_slot = get_current_slot(ctx)
  expect new_stats.last_interaction_slot >= current_slot

  // Validate other stats remain consistent or are properly updated
  expect new_stats.total_volume_ada >= old_stats.total_volume_ada
  expect new_stats.total_volume_token >= old_stats.total_volume_token
  expect new_stats.total_fees_collected >= old_stats.total_fees_collected
  expect new_stats.swap_count >= old_stats.swap_count

  True
}

// Validate user receives correct LP tokens
fn validate_user_lp_token_output(
  redeemer: LiquidityProvisionRedeemer,
  liquidity_result: LiquidityProvisionResult,
  pool_config: PoolConfig,
  ctx: ScriptContext
) -> Bool {
  // Find user outputs in transaction
  let user_outputs = list.filter(ctx.transaction.outputs, fn(output) {
    output.address == redeemer.user_address
  })

  // Validate user receives at least one output
  expect list.length(user_outputs) >= 1

  // Calculate total LP tokens user receives
  let total_user_lp_tokens = list.foldr(user_outputs, 0, fn(output, acc) {
    acc + get_asset_quantity(output.value, pool_config.lp_token_policy, pool_config.lp_token_name)
  })

  // Validate user receives correct amount of LP tokens
  expect total_user_lp_tokens >= liquidity_result.lp_tokens_to_mint

  True
}

// Get current slot from transaction context
fn get_current_slot(ctx: ScriptContext) -> Int {
  when ctx.transaction.validity_range.lower_bound.bound_type is {
    Finite(slot) -> slot
    _ -> 0
  }
}
