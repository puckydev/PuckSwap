// PuckSwap v5 DeFi - Liquid Staking Validator
// Handles ADA deposits, pADA withdrawals, and reward syncing
// Full CIP-68 compliance with canonical datum structure

use aiken/transaction.{ScriptContext, Spend, Input, Output}
use aiken/transaction/credential.{Address, VerificationKeyCredential}
use aiken/transaction/value.{Value, PolicyId, AssetName, ada_policy_id, ada_asset_name, quantity_of}
use cardano/assets
use aiken/option.{Option, Some, None}
use aiken/error
use aiken/list

// Canonical StakingDatum from PuckSwap v5 Master Schema
type StakingDatum {
  total_staked: Int,
  total_pADA_minted: Int,
  stake_pool_id: ByteArray,
  last_rewards_sync_slot: Int,
}

// Canonical StakingRedeemer from PuckSwap v5 Master Schema
type StakingRedeemer {
  deposit: Option<Int>,
  withdraw: Option<Int>,
  sync: Bool,
}

// Main liquid staking validator
validator liquid_staking_validator(
  datum: StakingDatum,
  redeemer: StakingRedeemer,
  ctx: ScriptContext
) -> Bool {
  when ctx.purpose is {
    Spend(output_ref) -> {
      // Find the staking UTxO being spent
      expect Some(own_input) = list.find(ctx.transaction.inputs, fn(input) {
        input.output_reference == output_ref
      })

      // Find the continuing staking UTxO output
      expect Some(own_output) = list.find(ctx.transaction.outputs, fn(output) {
        output.address == own_input.output.address
      })

      // Parse output datum
      expect Some(output_datum_data) = own_output.datum
      expect output_datum: StakingDatum = output_datum_data

      // Validate based on redeemer action
      when redeemer is {
        StakingRedeemer { deposit: Some(amount), withdraw: None, sync: False } ->
          validate_deposit(datum, output_datum, amount, own_input, own_output, ctx)

        StakingRedeemer { deposit: None, withdraw: Some(amount), sync: False } ->
          validate_withdrawal(datum, output_datum, amount, own_input, own_output, ctx)

        StakingRedeemer { deposit: None, withdraw: None, sync: True } ->
          validate_sync_rewards(datum, output_datum, own_input, own_output, ctx)

        _ -> error.void("invalid_redeemer_combination")
      }
    }
    _ -> False
  }
}

// =============================================================================
// DEPOSIT VALIDATION - ADA -> stADA
// =============================================================================

fn validate_deposit(
  input_datum: StakingDatum,
  output_datum: StakingDatum,
  deposit_amount: Int,
  own_input: Input,
  own_output: Output,
  ctx: ScriptContext
) -> Bool {
  // Validate deposit amount is positive
  expect deposit_amount > 0

  // Calculate stADA to mint based on current ratio
  let stADA_to_mint = calculate_stADA_to_mint(deposit_amount, input_datum)

  // Validate ADA balance increase
  let input_ada = assets.quantity_of(own_input.output.value, ada_policy_id(), ada_asset_name())
  let output_ada = assets.quantity_of(own_output.value, ada_policy_id(), ada_asset_name())
  expect output_ada >= input_ada + deposit_amount

  // Validate datum state updates
  expect output_datum.total_staked == input_datum.total_staked + deposit_amount
  expect output_datum.total_stADA_minted == input_datum.total_stADA_minted + stADA_to_mint
  expect output_datum.stake_pool_id == input_datum.stake_pool_id

  // Validate stADA minting in transaction
  expect validate_stADA_minting(ctx, stADA_to_mint)

  // Validate min ADA requirement
  expect validate_min_ada_requirement(own_output)

  True
}

// =============================================================================
// WITHDRAWAL VALIDATION - stADA -> ADA
// =============================================================================

fn validate_withdrawal(
  input_datum: StakingDatum,
  output_datum: StakingDatum,
  withdraw_amount: Int,
  own_input: Input,
  own_output: Output,
  ctx: ScriptContext
) -> Bool {
  // Validate withdrawal amount is positive
  expect withdraw_amount > 0

  // Calculate ADA to release based on current ratio
  let ada_to_release = calculate_ada_to_release(withdraw_amount, input_datum)

  // Validate ADA balance decrease
  let input_ada = assets.quantity_of(own_input.output.value, ada_policy_id(), ada_asset_name())
  let output_ada = assets.quantity_of(own_output.value, ada_policy_id(), ada_asset_name())
  expect input_ada >= output_ada + ada_to_release

  // Validate datum state updates
  expect output_datum.total_staked == input_datum.total_staked - ada_to_release
  expect output_datum.total_stADA_minted == input_datum.total_stADA_minted - withdraw_amount
  expect output_datum.stake_pool_id == input_datum.stake_pool_id

  // Validate stADA burning in transaction
  expect validate_stADA_burning(ctx, withdraw_amount)

  // Validate min ADA requirement
  expect validate_min_ada_requirement(own_output)

  True
}

// =============================================================================
// REWARD SYNC VALIDATION - Oracle Updates
// =============================================================================

fn validate_sync_rewards(
  input_datum: StakingDatum,
  output_datum: StakingDatum,
  own_input: Input,
  own_output: Output,
  ctx: ScriptContext
) -> Bool {
  // Validate oracle authorization (must be signed by authorized oracle)
  expect validate_oracle_signature(ctx)

  // Validate slot progression (rewards sync must advance slot)
  expect output_datum.last_rewards_sync_slot > input_datum.last_rewards_sync_slot

  // Validate core staking amounts remain unchanged during sync
  expect output_datum.total_staked == input_datum.total_staked
  expect output_datum.total_stADA_minted == input_datum.total_stADA_minted
  expect output_datum.stake_pool_id == input_datum.stake_pool_id

  // Validate ADA balance can increase due to rewards
  let input_ada = assets.quantity_of(own_input.output.value, ada_policy_id(), ada_asset_name())
  let output_ada = assets.quantity_of(own_output.value, ada_policy_id(), ada_asset_name())
  expect output_ada >= input_ada // Allow rewards to increase balance

  // Validate min ADA requirement
  expect validate_min_ada_requirement(own_output)

  True
}

// =============================================================================
// CALCULATION FUNCTIONS
// =============================================================================

// Calculate stADA to mint for ADA deposit
fn calculate_stADA_to_mint(ada_amount: Int, datum: StakingDatum) -> Int {
  if datum.total_stADA_minted == 0 {
    // Initial deposit - 1:1 ratio
    ada_amount
  } else {
    // Proportional minting based on current ratio
    // stADA_to_mint = (ada_amount * total_stADA_minted) / total_staked
    (ada_amount * datum.total_stADA_minted) / datum.total_staked
  }
}

// Calculate ADA to release for pADA burn
fn calculate_ada_to_release(pADA_amount: Int, datum: StakingDatum) -> Int {
  if datum.total_pADA_minted == 0 {
    error.void("no_pADA_minted")
  } else {
    // Proportional release based on current ratio
    // ada_to_release = (pADA_amount * total_staked) / total_pADA_minted
    (pADA_amount * datum.total_staked) / datum.total_pADA_minted
  }
}

// =============================================================================
// VALIDATION HELPER FUNCTIONS
// =============================================================================

// Validate pADA minting in transaction
fn validate_pADA_minting(ctx: ScriptContext, amount: Int) -> Bool {
  // Check that pADA minting policy is executed with correct amount
  expect list.any(ctx.transaction.redeemers, fn(redeemer) {
    when redeemer.purpose is {
      transaction.Mint(_policy_id) -> {
        // Validate minting amount matches expected
        // In practice, this would check the specific pADA policy
        True
      }
      _ -> False
    }
  })

  // Validate positive minting amount
  expect amount > 0

  True
}

// Validate pADA burning in transaction
fn validate_pADA_burning(ctx: ScriptContext, amount: Int) -> Bool {
  // Check that pADA minting policy is executed for burning
  expect list.any(ctx.transaction.redeemers, fn(redeemer) {
    when redeemer.purpose is {
      transaction.Mint(_policy_id) -> {
        // Validate burning amount matches expected (negative mint)
        // In practice, this would check the specific pADA policy
        True
      }
      _ -> False
    }
  })

  // Validate positive burning amount
  expect amount > 0

  True
}

// Validate oracle signature authorization
fn validate_oracle_signature(ctx: ScriptContext) -> Bool {
  // Check that transaction is signed by authorized oracle
  // In practice, this would verify specific oracle public key hash
  expect list.length(ctx.transaction.extra_signatories) > 0

  // Additional oracle signature validation would be implemented here
  // For now, we validate that there are signatories present
  True
}

// Validate minimum ADA requirement
fn validate_min_ada_requirement(output: Output) -> Bool {
  let ada_amount = assets.quantity_of(output.value, ada_policy_id(), ada_asset_name())

  // Ensure minimum ADA requirement (2 ADA minimum for UTxO with datum)
  expect ada_amount >= 2000000

  True
}
