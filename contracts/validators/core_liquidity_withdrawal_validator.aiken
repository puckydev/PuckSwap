// PuckSwap Core Liquidity Withdrawal Validator - Production Ready
// Handles LP token burning for proportional ADA + PUCKY withdrawals
// Full CIP-68 compliance with Aiken standard library usage

use aiken/transaction.{ScriptContext, Spend, Input, Output, OutputReference, Finite}
use aiken/transaction/credential.{Address}
use aiken/transaction/value.{Value, PolicyId, AssetName, ada_policy_id, ada_asset_name, quantity_of}
use cardano/assets
use aiken/option.{Option, Some, None}
use aiken/error
use aiken/list
use aiken/math
use aiken/cbor

// Import CIP-68 types and utilities
use lib/cip68_types.{PoolCIP68Datum, PoolState, PoolConfig}
use lib/min_ada_utils.{validate_min_ada_output}

// =============================================================================
// CORE LIQUIDITY WITHDRAWAL VALIDATOR - PRODUCTION READY
// =============================================================================
// 
// Features:
// - Proportional LP token burning for ADA + PUCKY withdrawals
// - LP token burning coordination
// - CIP-68 compliant datum structure
// - Minimum ADA requirement validation
// - Proportional withdrawal validation
// - Slippage protection
// =============================================================================

// Core liquidity withdrawal redeemer
pub type CoreWithdrawalRedeemer {
  lp_tokens_to_burn: Int,
  min_ada_out: Int,
  min_token_out: Int,
  user_address: Address,
  deadline_slot: Int,
}

// Withdrawal calculation result
pub type WithdrawalResult {
  ada_amount_out: Int,
  token_amount_out: Int,
  new_ada_reserve: Int,
  new_token_reserve: Int,
  new_total_lp_supply: Int,
}

// Main liquidity withdrawal validator
validator core_liquidity_withdrawal_validator(
  ctx: ScriptContext,
  datum: PoolCIP68Datum,
  redeemer: CoreWithdrawalRedeemer
) -> Bool {
  when ctx.purpose is {
    Spend(output_ref) -> {
      // Find pool input and output UTxOs
      expect Some(pool_input) = find_input(ctx.transaction.inputs, output_ref)
      expect Some(pool_output) = find_output(ctx.transaction.outputs, pool_input.output.address)

      // Validate CIP-68 structure integrity
      expect validate_cip68_structure(datum)

      // Validate and execute the liquidity withdrawal operation
      validate_core_liquidity_withdrawal(pool_input, pool_output, datum, redeemer, ctx)
    }
    _ -> False
  }
}

// Validate core liquidity withdrawal operation
fn validate_core_liquidity_withdrawal(
  pool_input: Input,
  pool_output: Output,
  datum: PoolCIP68Datum,
  redeemer: CoreWithdrawalRedeemer,
  ctx: ScriptContext
) -> Bool {
  // Extract pool state and configuration
  let pool_state = datum.pool_state
  let pool_config = datum.pool_config

  // Validate pool is not paused
  expect !pool_config.is_paused

  // Validate deadline hasn't passed
  expect validate_deadline(redeemer.deadline_slot, ctx)

  // Validate redeemer parameters
  expect validate_redeemer_parameters(redeemer)

  // Get current pool reserves from UTxO values
  let (current_ada_reserve, current_token_reserve) = 
    extract_pool_reserves(pool_input.output.value, pool_config)

  // Verify reserves match datum
  expect current_ada_reserve == pool_state.ada_reserve
  expect current_token_reserve == pool_state.token_reserve

  // Calculate liquidity withdrawal
  let withdrawal_result = calculate_core_liquidity_withdrawal(
    current_ada_reserve,
    current_token_reserve,
    pool_state.total_lp_supply,
    redeemer.lp_tokens_to_burn
  )

  // Validate minimum output requirements (slippage protection)
  expect withdrawal_result.ada_amount_out >= redeemer.min_ada_out
  expect withdrawal_result.token_amount_out >= redeemer.min_token_out

  // Validate pool output UTxO
  expect validate_pool_output(pool_output, datum, withdrawal_result, ctx)

  // Validate LP token burning
  expect validate_lp_token_burning(redeemer.lp_tokens_to_burn, pool_config, ctx)

  // Validate user receives correct output amounts
  expect validate_user_output(redeemer.user_address, withdrawal_result, pool_config, ctx)

  // Validate user provides LP tokens to burn
  expect validate_user_lp_tokens(redeemer.user_address, redeemer.lp_tokens_to_burn, pool_config, ctx)

  // Validate minimum ADA requirements
  expect validate_min_ada_output(pool_output)

  True
}

// Calculate core liquidity withdrawal
fn calculate_core_liquidity_withdrawal(
  ada_reserve: Int,
  token_reserve: Int,
  total_lp_supply: Int,
  lp_tokens_to_burn: Int
) -> WithdrawalResult {
  // Validate input parameters
  expect ada_reserve > 0
  expect token_reserve > 0
  expect total_lp_supply > 0
  expect lp_tokens_to_burn > 0
  expect lp_tokens_to_burn <= total_lp_supply

  // Calculate proportional withdrawal amounts
  let ada_amount_out = (ada_reserve * lp_tokens_to_burn) / total_lp_supply
  let token_amount_out = (token_reserve * lp_tokens_to_burn) / total_lp_supply

  // Validate outputs are positive
  expect ada_amount_out > 0
  expect token_amount_out > 0

  // Calculate new pool state
  let new_ada_reserve = ada_reserve - ada_amount_out
  let new_token_reserve = token_reserve - token_amount_out
  let new_total_lp_supply = total_lp_supply - lp_tokens_to_burn

  // Validate new reserves are non-negative
  expect new_ada_reserve >= 0
  expect new_token_reserve >= 0
  expect new_total_lp_supply >= 0

  WithdrawalResult {
    ada_amount_out: ada_amount_out,
    token_amount_out: token_amount_out,
    new_ada_reserve: new_ada_reserve,
    new_token_reserve: new_token_reserve,
    new_total_lp_supply: new_total_lp_supply,
  }
}

// Validate CIP-68 structure integrity
fn validate_cip68_structure(datum: PoolCIP68Datum) -> Bool {
  // Validate version is supported
  expect datum.version >= 1

  // Validate pool state integrity
  expect datum.pool_state.ada_reserve > 0
  expect datum.pool_state.token_reserve > 0
  expect datum.pool_state.total_lp_supply > 0

  // Validate pool configuration
  expect datum.pool_config.fee_bps >= 0 && datum.pool_config.fee_bps <= 10000

  True
}

// Validate deadline hasn't passed
fn validate_deadline(deadline_slot: Int, ctx: ScriptContext) -> Bool {
  when ctx.transaction.validity_range.upper_bound.bound_type is {
    Finite(upper_slot) -> deadline_slot >= upper_slot
    _ -> True  // No upper bound means no deadline constraint
  }
}

// Validate redeemer parameters
fn validate_redeemer_parameters(redeemer: CoreWithdrawalRedeemer) -> Bool {
  expect redeemer.lp_tokens_to_burn > 0
  expect redeemer.min_ada_out >= 0
  expect redeemer.min_token_out >= 0
  expect redeemer.deadline_slot > 0
  True
}

// Extract pool reserves from UTxO value
fn extract_pool_reserves(value: Value, config: PoolConfig) -> (Int, Int) {
  let ada_amount = quantity_of(value, ada_policy_id(), ada_asset_name())
  let token_amount = quantity_of(value, config.token_policy, config.token_name)
  (ada_amount, token_amount)
}

// Validate pool output UTxO has correct updated state
fn validate_pool_output(
  pool_output: Output,
  input_datum: PoolCIP68Datum,
  withdrawal_result: WithdrawalResult,
  ctx: ScriptContext
) -> Bool {
  // Extract output datum
  expect Some(output_datum_data) = pool_output.datum
  expect output_datum: PoolCIP68Datum = output_datum_data

  // Validate pool state is correctly updated
  expect output_datum.pool_state.ada_reserve == withdrawal_result.new_ada_reserve
  expect output_datum.pool_state.token_reserve == withdrawal_result.new_token_reserve
  expect output_datum.pool_state.total_lp_supply == withdrawal_result.new_total_lp_supply

  // Validate other fields remain unchanged
  expect output_datum.pool_config == input_datum.pool_config
  expect output_datum.version == input_datum.version

  // Validate pool UTxO value matches new reserves
  let expected_ada = withdrawal_result.new_ada_reserve
  let expected_token = withdrawal_result.new_token_reserve
  let actual_ada = quantity_of(pool_output.value, ada_policy_id(), ada_asset_name())
  let actual_token = quantity_of(pool_output.value, input_datum.pool_config.token_policy, input_datum.pool_config.token_name)

  expect actual_ada == expected_ada
  expect actual_token == expected_token

  True
}

// Validate LP token burning occurs correctly
fn validate_lp_token_burning(
  lp_tokens_to_burn: Int,
  pool_config: PoolConfig,
  ctx: ScriptContext
) -> Bool {
  // Find burning in transaction (negative minting)
  let minted_value = ctx.transaction.mint
  let burned_lp_tokens = quantity_of(minted_value, pool_config.lp_token_policy, pool_config.lp_token_name)
  
  expect burned_lp_tokens == -lp_tokens_to_burn  // Negative for burning
  expect lp_tokens_to_burn > 0

  True
}

// Validate user receives correct output amounts
fn validate_user_output(
  user_address: Address,
  withdrawal_result: WithdrawalResult,
  pool_config: PoolConfig,
  ctx: ScriptContext
) -> Bool {
  // Find user output UTxO(s)
  let user_outputs = list.filter(
    ctx.transaction.outputs,
    fn(output) { output.address == user_address }
  )

  // Calculate total user output amounts
  let total_ada_output = list.foldr(
    user_outputs,
    0,
    fn(output, acc) { acc + quantity_of(output.value, ada_policy_id(), ada_asset_name()) }
  )

  let total_token_output = list.foldr(
    user_outputs,
    0,
    fn(output, acc) { acc + quantity_of(output.value, pool_config.token_policy, pool_config.token_name) }
  )

  // Validate user receives at least the calculated amounts
  expect total_ada_output >= withdrawal_result.ada_amount_out
  expect total_token_output >= withdrawal_result.token_amount_out

  True
}

// Validate user provides LP tokens to burn
fn validate_user_lp_tokens(
  user_address: Address,
  lp_tokens_to_burn: Int,
  pool_config: PoolConfig,
  ctx: ScriptContext
) -> Bool {
  // Find user input UTxO(s)
  let user_inputs = list.filter(
    ctx.transaction.inputs,
    fn(input) { input.output.address == user_address }
  )

  // Calculate total user LP token input
  let total_lp_input = list.foldr(
    user_inputs,
    0,
    fn(input, acc) { acc + quantity_of(input.output.value, pool_config.lp_token_policy, pool_config.lp_token_name) }
  )

  // Validate user has provided sufficient LP tokens
  expect total_lp_input >= lp_tokens_to_burn

  True
}

// Find input UTxO by output reference
fn find_input(inputs: List<Input>, output_ref: OutputReference) -> Option<Input> {
  list.find(inputs, fn(input) { input.output_reference == output_ref })
}

// Find output UTxO by address
fn find_output(outputs: List<Output>, address: Address) -> Option<Output> {
  list.find(outputs, fn(output) { output.address == address })
}
