use aiken/transaction.{ScriptContext, Spend, Transaction, Input, Output, OutputReference, Finite, PosInfinity}
use aiken/transaction/credential.{Address, VerificationKeyCredential, ScriptCredential}
use aiken/transaction/value.{Value, PolicyId, AssetName, ada_policy_id, ada_asset_name, quantity_of, to_dict}
use aiken/list
use aiken/math
use aiken/bytearray
use aiken/dict
use aiken/cbor

// Import shared types and utilities
use puckswap/lib/cip68_types.{PoolCIP68Datum, PoolState, PoolConfig, PoolStats, CIP68Metadata}
use puckswap/lib/min_ada_utils.{validate_min_ada_output, calculate_pool_min_ada}
use puckswap/lib/value_utils.{get_ada_quantity, get_asset_quantity, find_input, find_output}
use puckswap/lib/withdrawal_utils.{calculate_withdrawal_amounts, validate_withdrawal_claim}

// =============================================================================
// LIQUIDITY WITHDRAWAL VALIDATOR V5 - COMPREHENSIVE IMPLEMENTATION
// =============================================================================
// 
// Features:
// - Proportional LP token burning and asset withdrawal
// - CIP-68 pool datum updates with accurate reserves
// - LP burn amount validation equals withdrawal claim
// - Pool draining and partial update attack prevention
// - Comprehensive security validations
// - Minimum liquidity preservation
// =============================================================================

// Enhanced liquidity withdrawal redeemer
pub type LiquidityWithdrawalRedeemer {
  lp_tokens_to_burn: Int,       // LP tokens to burn
  min_ada_out: Int,             // Minimum ADA to receive (slippage protection)
  min_token_out: Int,           // Minimum tokens to receive (slippage protection)
  max_slippage_bps: Int,        // Maximum allowed slippage (basis points)
  deadline_slot: Int,           // Transaction deadline for MEV protection
  user_address: Address,        // User address for validation
  is_emergency_withdrawal: Bool, // Whether this is an emergency withdrawal
}

// Withdrawal calculation result
pub type WithdrawalResult {
  ada_to_withdraw: Int,
  token_to_withdraw: Int,
  new_ada_reserve: Int,
  new_token_reserve: Int,
  new_total_lp_supply: Int,
  withdrawal_share_percentage: Int,
  effective_price: Int,
}

// Withdrawal validation result
pub type WithdrawalValidation {
  is_valid: Bool,
  error_code: WithdrawalErrorCode,
  error_message: ByteArray,
}

// Withdrawal error codes
pub type WithdrawalErrorCode {
  NoError
  InsufficientLPTokens
  ExcessiveWithdrawal
  PoolDraining
  PartialUpdateAttack
  InvalidAmounts
  DeadlineExpired
  UnauthorizedAccess
  MinAdaViolation
  PoolPaused
}

// =============================================================================
// MAIN VALIDATOR
// =============================================================================

// Main liquidity withdrawal validator with comprehensive security
validator liquidity_withdrawal_validator_v5(
  ctx: ScriptContext,
  datum: PoolCIP68Datum,
  redeemer: LiquidityWithdrawalRedeemer
) -> Bool {
  when ctx.purpose is {
    Spend(output_ref) -> {
      // Find pool input and output UTxOs
      expect Some(pool_input) = find_input(ctx.transaction.inputs, output_ref)
      expect Some(pool_output) = find_output(ctx.transaction.outputs, pool_input.output.address)

      // Validate CIP-68 structure integrity
      expect validate_cip68_structure(datum)

      // Perform comprehensive security validations
      expect validate_withdrawal_security_constraints(pool_input, pool_output, datum, redeemer, ctx)

      // Validate and execute the withdrawal operation
      validate_liquidity_withdrawal_operation(pool_input, pool_output, datum, redeemer, ctx)
    }
    _ -> False
  }
}

// =============================================================================
// CORE WITHDRAWAL VALIDATION
// =============================================================================

// Validate liquidity withdrawal operation with all security checks
fn validate_liquidity_withdrawal_operation(
  pool_input: Input,
  pool_output: Output,
  datum: PoolCIP68Datum,
  redeemer: LiquidityWithdrawalRedeemer,
  ctx: ScriptContext
) -> Bool {
  // Extract pool state and configuration
  let pool_state = datum.pool_state
  let pool_config = datum.pool_config
  let pool_stats = datum.pool_stats

  // Validate pool is not paused (unless emergency withdrawal)
  if !redeemer.is_emergency_withdrawal {
    expect !pool_config.is_paused
  }

  // Validate deadline hasn't passed
  expect validate_deadline(redeemer.deadline_slot, ctx)

  // Validate redeemer parameters
  expect validate_redeemer_parameters(redeemer)

  // Get current pool reserves from UTxO values
  let (current_ada_reserve, current_token_reserve) = 
    extract_pool_reserves(pool_input.output.value, pool_config)

  // Validate reserves match datum
  expect current_ada_reserve == pool_state.ada_reserve
  expect current_token_reserve == pool_state.token_reserve

  // Validate sufficient LP tokens exist
  expect pool_state.total_lp_supply >= redeemer.lp_tokens_to_burn

  // Calculate withdrawal amounts
  let withdrawal_result = calculate_withdrawal_amounts(
    current_ada_reserve,
    current_token_reserve,
    pool_state.total_lp_supply,
    redeemer.lp_tokens_to_burn
  )

  // Validate minimum output requirements (slippage protection)
  expect withdrawal_result.ada_to_withdraw >= redeemer.min_ada_out
  expect withdrawal_result.token_to_withdraw >= redeemer.min_token_out

  // Validate withdrawal doesn't drain the pool
  expect validate_pool_draining_protection(withdrawal_result, pool_state, redeemer)

  // Get new pool state from output
  expect Some(output_datum_data) = pool_output.datum
  expect new_pool_datum: PoolCIP68Datum = output_datum_data

  // Validate reserves are updated correctly
  expect new_pool_datum.pool_state.ada_reserve == withdrawal_result.new_ada_reserve
  expect new_pool_datum.pool_state.token_reserve == withdrawal_result.new_token_reserve
  expect new_pool_datum.pool_state.total_lp_supply == withdrawal_result.new_total_lp_supply

  // Validate pool reserves in output UTxO match calculated values
  let (output_ada_reserve, output_token_reserve) = 
    extract_pool_reserves(pool_output.value, pool_config)
  
  expect output_ada_reserve == withdrawal_result.new_ada_reserve
  expect output_token_reserve == withdrawal_result.new_token_reserve

  // Validate minimum ADA requirements are met
  expect validate_min_ada_compliance(pool_output, new_pool_datum)

  // Validate LP token burning
  expect validate_lp_token_burning(redeemer.lp_tokens_to_burn, pool_config, ctx)

  // Validate pool statistics are updated correctly
  expect validate_pool_stats_update_withdrawal(pool_stats, new_pool_datum.pool_stats, withdrawal_result, ctx)

  // Validate user receives correct withdrawal amounts
  expect validate_user_withdrawal_output(redeemer, withdrawal_result, pool_config, ctx)

  // Validate against partial update attacks
  expect validate_partial_update_protection(pool_input, pool_output, datum, new_pool_datum, ctx)

  True
}

// =============================================================================
// WITHDRAWAL CALCULATION
// =============================================================================

// Calculate proportional withdrawal amounts
fn calculate_withdrawal_amounts(
  ada_reserve: Int,
  token_reserve: Int,
  total_lp_supply: Int,
  lp_tokens_to_burn: Int
) -> WithdrawalResult {
  // Validate input parameters
  expect ada_reserve > 0
  expect token_reserve > 0
  expect total_lp_supply > 0
  expect lp_tokens_to_burn > 0
  expect lp_tokens_to_burn <= total_lp_supply

  // Calculate proportional withdrawal amounts
  let ada_to_withdraw = ada_reserve * lp_tokens_to_burn / total_lp_supply
  let token_to_withdraw = token_reserve * lp_tokens_to_burn / total_lp_supply

  // Calculate new reserves after withdrawal
  let new_ada_reserve = ada_reserve - ada_to_withdraw
  let new_token_reserve = token_reserve - token_to_withdraw
  let new_total_lp_supply = total_lp_supply - lp_tokens_to_burn

  // Calculate withdrawal share percentage (scaled by 1e6)
  let withdrawal_share_percentage = lp_tokens_to_burn * 1000000 / total_lp_supply

  // Calculate effective price (ADA per token, scaled by 1e6)
  let effective_price = if token_to_withdraw > 0 {
    ada_to_withdraw * 1000000 / token_to_withdraw
  } else {
    0
  }

  WithdrawalResult {
    ada_to_withdraw: ada_to_withdraw,
    token_to_withdraw: token_to_withdraw,
    new_ada_reserve: new_ada_reserve,
    new_token_reserve: new_token_reserve,
    new_total_lp_supply: new_total_lp_supply,
    withdrawal_share_percentage: withdrawal_share_percentage,
    effective_price: effective_price,
  }
}

// =============================================================================
// SECURITY VALIDATION FUNCTIONS
// =============================================================================

// Comprehensive security constraint validation for withdrawal
fn validate_withdrawal_security_constraints(
  pool_input: Input,
  pool_output: Output,
  datum: PoolCIP68Datum,
  redeemer: LiquidityWithdrawalRedeemer,
  ctx: ScriptContext
) -> Bool {
  // Validate pool NFT preservation
  let pool_nft_policy = datum.pool_config.lp_token_policy
  let pool_nft_name = datum.pool_state.pool_nft_name
  
  expect quantity_of(pool_input.output.value, pool_nft_policy, pool_nft_name) == 1
  expect quantity_of(pool_output.value, pool_nft_policy, pool_nft_name) == 1

  // Validate user authorization
  expect validate_user_authorization(redeemer.user_address, ctx)

  // Validate transaction structure
  expect validate_transaction_structure(ctx)

  // Validate against dust attacks
  expect validate_dust_attack_protection(redeemer)

  // Validate withdrawal amounts are reasonable
  expect validate_reasonable_withdrawal_amounts(redeemer, datum.pool_state)

  True
}

// Validate CIP-68 structure integrity
fn validate_cip68_structure(datum: PoolCIP68Datum) -> Bool {
  // Validate version compatibility
  expect datum.version >= 1

  // Validate metadata structure
  expect validate_metadata_structure(datum.metadata)

  // Validate pool state consistency
  expect datum.pool_state.ada_reserve >= 0
  expect datum.pool_state.token_reserve >= 0
  expect datum.pool_state.total_lp_supply >= 0

  // Validate pool configuration
  expect datum.pool_config.fee_bps >= 0 && datum.pool_config.fee_bps <= 10000
  expect datum.pool_config.protocol_fee_bps >= 0 && datum.pool_config.protocol_fee_bps <= 1000

  True
}

// Validate redeemer parameters
fn validate_redeemer_parameters(redeemer: LiquidityWithdrawalRedeemer) -> Bool {
  // Validate amounts
  expect redeemer.lp_tokens_to_burn > 0
  expect redeemer.min_ada_out >= 0
  expect redeemer.min_token_out >= 0

  // Validate slippage parameters
  expect redeemer.max_slippage_bps >= 0 && redeemer.max_slippage_bps <= 10000

  // Validate deadline is reasonable
  expect redeemer.deadline_slot > 0

  True
}

// Validate deadline hasn't passed
fn validate_deadline(deadline_slot: Int, ctx: ScriptContext) -> Bool {
  when ctx.transaction.validity_range.upper_bound.bound_type is {
    Finite(upper_bound) -> upper_bound <= deadline_slot
    PosInfinity -> True
    _ -> False
  }
}

// Extract pool reserves from UTxO value
fn extract_pool_reserves(pool_value: Value, pool_config: PoolConfig) -> (Int, Int) {
  let ada_amount = get_ada_quantity(pool_value)
  let token_amount = get_asset_quantity(pool_value, pool_config.token_policy, pool_config.token_name)

  // Validate reserves are positive
  expect ada_amount >= 0
  expect token_amount >= 0

  (ada_amount, token_amount)
}

// Validate pool draining protection
fn validate_pool_draining_protection(
  withdrawal_result: WithdrawalResult,
  pool_state: PoolState,
  redeemer: LiquidityWithdrawalRedeemer
) -> Bool {
  // Define minimum liquidity that must remain in pool
  let min_ada_reserve = 10_000_000   // 10 ADA minimum
  let min_token_reserve = 1_000_000  // 1 token minimum
  let min_lp_supply = 1000           // Minimum LP supply to prevent total draining

  // For emergency withdrawals, allow more aggressive draining
  if redeemer.is_emergency_withdrawal {
    expect withdrawal_result.new_ada_reserve >= 1_000_000   // 1 ADA minimum
    expect withdrawal_result.new_token_reserve >= 100_000   // 0.1 token minimum
  } else {
    expect withdrawal_result.new_ada_reserve >= min_ada_reserve
    expect withdrawal_result.new_token_reserve >= min_token_reserve
    expect withdrawal_result.new_total_lp_supply >= min_lp_supply
  }

  // Validate withdrawal doesn't exceed maximum percentage (90% for normal, 99% for emergency)
  let max_withdrawal_percentage = if redeemer.is_emergency_withdrawal { 9900 } else { 9000 }  // 99% or 90%
  expect withdrawal_result.withdrawal_share_percentage <= max_withdrawal_percentage

  True
}

// Validate user authorization
fn validate_user_authorization(user_address: Address, ctx: ScriptContext) -> Bool {
  let user_signed = list.any(ctx.transaction.extra_signatories, fn(signature) {
    when user_address.payment_credential is {
      VerificationKeyCredential(pkh) -> signature == pkh
      _ -> False
    }
  })

  expect user_signed

  True
}

// Validate transaction structure
fn validate_transaction_structure(ctx: ScriptContext) -> Bool {
  let tx = ctx.transaction

  // Validate fee is reasonable
  expect tx.fee <= 10_000_000  // Max 10 ADA fee

  // Validate validity range is reasonable
  let validity_range_size = when (tx.validity_range.lower_bound.bound_type, tx.validity_range.upper_bound.bound_type) is {
    (Finite(lower), Finite(upper)) -> upper - lower
    _ -> 0
  }

  // Allow reasonable validity range (up to 2 hours = 7200 slots)
  expect validity_range_size <= 7200

  True
}

// Validate against dust attacks
fn validate_dust_attack_protection(redeemer: LiquidityWithdrawalRedeemer) -> Bool {
  // Define minimum withdrawal amounts to prevent dust attacks
  let min_lp_tokens = 1000  // Minimum LP tokens to burn

  expect redeemer.lp_tokens_to_burn >= min_lp_tokens

  True
}

// Validate withdrawal amounts are reasonable relative to pool size
fn validate_reasonable_withdrawal_amounts(
  redeemer: LiquidityWithdrawalRedeemer,
  pool_state: PoolState
) -> Bool {
  // Validate LP tokens to burn don't exceed total supply
  expect redeemer.lp_tokens_to_burn <= pool_state.total_lp_supply

  // For non-emergency withdrawals, limit single withdrawal to 50% of pool
  if !redeemer.is_emergency_withdrawal {
    let max_single_withdrawal = pool_state.total_lp_supply * 5000 / 10000  // 50%
    expect redeemer.lp_tokens_to_burn <= max_single_withdrawal
  }

  True
}

// Validate metadata structure
fn validate_metadata_structure(metadata: CIP68Metadata) -> Bool {
  // Validate required metadata fields exist
  // This is a simplified validation - in practice would check specific fields
  True
}

// Validate minimum ADA compliance
fn validate_min_ada_compliance(pool_output: Output, datum: PoolCIP68Datum) -> Bool {
  // Calculate required minimum ADA for pool UTxO
  let datum_size = estimate_datum_size(pool_output.datum)
  let required_min_ada = calculate_pool_min_ada(pool_output.value, datum_size, True, 2)
  let actual_ada = get_ada_quantity(pool_output.value)

  expect actual_ada >= required_min_ada

  True
}

// Estimate datum size (simplified)
fn estimate_datum_size(datum: Data) -> Int {
  // Simplified estimation - would use actual CBOR size in production
  600  // Conservative estimate for CIP-68 pool datum
}

// Validate LP token burning
fn validate_lp_token_burning(
  lp_tokens_to_burn: Int,
  pool_config: PoolConfig,
  ctx: ScriptContext
) -> Bool {
  // Get burned tokens from this transaction (negative mint)
  let mint_value = ctx.transaction.mint
  let lp_token_amount = get_asset_quantity(mint_value, pool_config.lp_token_policy, pool_config.lp_token_name)

  // Validate correct amount of LP tokens are being burned (negative amount)
  expect lp_token_amount == -lp_tokens_to_burn
  expect lp_tokens_to_burn > 0

  True
}

// Validate pool statistics update for withdrawal
fn validate_pool_stats_update_withdrawal(
  old_stats: PoolStats,
  new_stats: PoolStats,
  withdrawal_result: WithdrawalResult,
  ctx: ScriptContext
) -> Bool {
  // Validate liquidity providers count (may decrease if someone fully exits)
  expect new_stats.liquidity_providers_count <= old_stats.liquidity_providers_count

  // Validate last interaction slot is updated
  let current_slot = get_current_slot(ctx)
  expect new_stats.last_interaction_slot >= current_slot

  // Validate other stats remain consistent
  expect new_stats.total_volume_ada >= old_stats.total_volume_ada
  expect new_stats.total_volume_token >= old_stats.total_volume_token
  expect new_stats.total_fees_collected >= old_stats.total_fees_collected
  expect new_stats.swap_count >= old_stats.swap_count

  True
}

// Validate user receives correct withdrawal amounts
fn validate_user_withdrawal_output(
  redeemer: LiquidityWithdrawalRedeemer,
  withdrawal_result: WithdrawalResult,
  pool_config: PoolConfig,
  ctx: ScriptContext
) -> Bool {
  // Find user outputs in transaction
  let user_outputs = list.filter(ctx.transaction.outputs, fn(output) {
    output.address == redeemer.user_address
  })

  // Validate user receives at least one output
  expect list.length(user_outputs) >= 1

  // Calculate total ADA and tokens user receives
  let total_user_ada = list.foldr(user_outputs, 0, fn(output, acc) {
    acc + get_ada_quantity(output.value)
  })

  let total_user_tokens = list.foldr(user_outputs, 0, fn(output, acc) {
    acc + get_asset_quantity(output.value, pool_config.token_policy, pool_config.token_name)
  })

  // Validate user receives correct amounts
  expect total_user_ada >= withdrawal_result.ada_to_withdraw
  expect total_user_tokens >= withdrawal_result.token_to_withdraw

  True
}

// Validate against partial update attacks
fn validate_partial_update_protection(
  pool_input: Input,
  pool_output: Output,
  input_datum: PoolCIP68Datum,
  output_datum: PoolCIP68Datum,
  ctx: ScriptContext
) -> Bool {
  // Validate all critical fields are updated consistently

  // Pool configuration should remain the same (except for admin updates)
  expect output_datum.pool_config.token_policy == input_datum.pool_config.token_policy
  expect output_datum.pool_config.token_name == input_datum.pool_config.token_name
  expect output_datum.pool_config.lp_token_policy == input_datum.pool_config.lp_token_policy
  expect output_datum.pool_config.lp_token_name == input_datum.pool_config.lp_token_name
  expect output_datum.pool_config.fee_bps == input_datum.pool_config.fee_bps

  // Pool state must be updated consistently
  expect output_datum.pool_state.ada_reserve < input_datum.pool_state.ada_reserve
  expect output_datum.pool_state.token_reserve < input_datum.pool_state.token_reserve
  expect output_datum.pool_state.total_lp_supply < input_datum.pool_state.total_lp_supply

  // Version should remain the same or increment
  expect output_datum.version >= input_datum.version

  // Validate no unauthorized changes to critical fields
  expect output_datum.pool_state.pool_nft_name == input_datum.pool_state.pool_nft_name

  True
}

// Get current slot from transaction context
fn get_current_slot(ctx: ScriptContext) -> Int {
  when ctx.transaction.validity_range.lower_bound.bound_type is {
    Finite(slot) -> slot
    _ -> 0
  }
}
