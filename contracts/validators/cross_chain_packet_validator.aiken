// PuckSwap v5 DeFi - Cross-Chain Packet Validator
// Individual cross-chain message packet validation and state management
// Full CIP-68 compliance with replay attack prevention

use aiken/transaction.{ScriptContext, Spend, find_input, find_output}
use aiken/transaction/credential.{Address, ScriptCredential, VerificationKeyCredential}
use aiken/transaction/value.{Value, PolicyId, AssetName, quantity_of, tokens, merge, from_lovelace}
use aiken/list
use aiken/math
use aiken/bytearray
use aiken/option
use aiken/hash.{blake2b_256}

// Import shared types and utilities
use puckswap/lib/cip68_types.{CIP68Metadata, CIP68_REFERENCE_PREFIX, CIP68_USER_PREFIX}
use puckswap/lib/min_ada_utils.{min_ada, validate_min_ada_output}
use puckswap/lib/value_utils.{ada_policy_id, ada_asset_name}

// Cross-chain packet datum with CIP-68 compliance
type CrossChainPacketDatum {
  // CIP-68 metadata structure
  metadata: CIP68Metadata,
  version: Int,
  
  // Packet identification
  packet_id: ByteArray,
  sequence_number: Int,
  source_chain: Int,
  destination_chain: Int,
  
  // Message content
  message_type: MessageType,
  payload: ByteArray,
  sender: ByteArray,
  recipient: Address,
  
  // Token transfer data
  token_policy: PolicyId,
  token_name: AssetName,
  amount: Int,
  
  // Routing information
  route_path: List<Int>, // Chain IDs in routing path
  current_hop: Int,
  next_hop: Int,
  
  // Timing and expiration
  created_at_slot: Int,
  timeout_slot: Int,
  last_updated_slot: Int,
  
  // Status and confirmations
  status: PacketStatus,
  confirmations: List<PacketConfirmation>,
  required_confirmations: Int,
  
  // Security and validation
  nonce: Int,
  hash_chain: List<ByteArray>,
  signature_threshold: Int,
  
  // Fee and gas information
  gas_limit: Int,
  gas_price: Int,
  execution_fee: Int,
  relayer_fee: Int,
  
  // Error handling
  retry_count: Int,
  max_retries: Int,
  error_message: ByteArray,
  
  // Bridge and operator info
  bridge_id: ByteArray,
  operator_address: Address,
  validator_set: List<ValidatorInfo>,
}

// Message types for cross-chain communication
type MessageType {
  TokenTransfer {
    transfer_type: TransferType,
  }
  
  ContractCall {
    target_contract: ByteArray,
    function_selector: ByteArray,
    call_data: ByteArray,
  }
  
  StateSync {
    state_root: ByteArray,
    state_proof: List<ByteArray>,
  }
  
  GovernanceMessage {
    proposal_id: Int,
    action_type: ByteArray,
    parameters: ByteArray,
  }
  
  BridgeControl {
    control_type: BridgeControlType,
    control_data: ByteArray,
  }
}

// Transfer types
type TransferType {
  Lock      // Lock tokens on source chain
  Unlock    // Unlock tokens on destination chain
  Mint      // Mint wrapped tokens
  Burn      // Burn wrapped tokens
}

// Bridge control types
type BridgeControlType {
  AddValidator
  RemoveValidator
  UpdateThreshold
  PauseTransfers
  ResumeTransfers
  UpdateFees
}

// Packet status enumeration
type PacketStatus {
  Created       // Packet created but not sent
  Sent          // Packet sent to bridge
  InTransit     // Packet being processed by bridge
  Delivered     // Packet delivered to destination
  Executed      // Packet executed on destination
  Failed        // Packet execution failed
  Timeout       // Packet timed out
  Cancelled     // Packet cancelled
}

// Packet confirmation from validators
type PacketConfirmation {
  validator_address: ByteArray,
  signature: ByteArray,
  timestamp: Int,
  block_height: Int,
  confirmation_data: ByteArray,
}

// Validator information
type ValidatorInfo {
  validator_address: ByteArray,
  public_key: ByteArray,
  voting_power: Int,
  is_active: Bool,
  reputation_score: Int,
}

// Cross-chain packet operations
type CrossChainPacketRedeemer {
  // Packet lifecycle operations
  CreatePacket {
    message_type: MessageType,
    payload: ByteArray,
    destination_chain: Int,
    recipient: Address,
    timeout_slots: Int,
  }
  
  SendPacket {
    bridge_id: ByteArray,
    route_path: List<Int>,
    gas_limit: Int,
    gas_price: Int,
  }
  
  ConfirmPacket {
    confirmation: PacketConfirmation,
  }
  
  ExecutePacket {
    execution_proof: ByteArray,
    execution_result: ByteArray,
  }
  
  RetryPacket {
    new_route_path: List<Int>,
    additional_fee: Int,
  }
  
  CancelPacket {
    reason: ByteArray,
  }
  
  // Status updates
  UpdatePacketStatus {
    new_status: PacketStatus,
    status_proof: ByteArray,
  }
  
  AddConfirmation {
    validator_confirmation: PacketConfirmation,
  }
  
  // Error handling
  ReportError {
    error_code: Int,
    error_message: ByteArray,
    error_proof: ByteArray,
  }
  
  // Administrative operations
  UpdateValidatorSet {
    new_validators: List<ValidatorInfo>,
    threshold: Int,
  }
  
  UpdateBridgeConfig {
    new_bridge_id: ByteArray,
    new_operator: Address,
  }
  
  // Emergency operations
  EmergencyCancel {
    admin_signature: ByteArray,
    reason: ByteArray,
  }
}

// Main cross-chain packet validator
validator cross_chain_packet_validator(
  ctx: ScriptContext,
  datum: CrossChainPacketDatum,
  redeemer: CrossChainPacketRedeemer
) -> Bool {
  when ctx.purpose is {
    Spend(output_ref) -> {
      // Find packet input and output
      expect Some(packet_input) = find_input(ctx.transaction.inputs, output_ref)
      expect Some(packet_output) = find_output(ctx.transaction.outputs, packet_input.output.address)
      
      // Validate basic constraints
      expect validate_packet_basic_constraints(packet_input, packet_output, datum, ctx)
      
      // Handle specific operations
      when redeemer is {
        CreatePacket { message_type, payload, destination_chain, recipient, timeout_slots } ->
          validate_create_packet(
            packet_input, packet_output, datum, message_type, payload, destination_chain, recipient, timeout_slots, ctx
          )
        
        SendPacket { bridge_id, route_path, gas_limit, gas_price } ->
          validate_send_packet(packet_input, packet_output, datum, bridge_id, route_path, gas_limit, gas_price, ctx)
        
        ConfirmPacket { confirmation } ->
          validate_confirm_packet(packet_input, packet_output, datum, confirmation, ctx)
        
        ExecutePacket { execution_proof, execution_result } ->
          validate_execute_packet(packet_input, packet_output, datum, execution_proof, execution_result, ctx)
        
        RetryPacket { new_route_path, additional_fee } ->
          validate_retry_packet(packet_input, packet_output, datum, new_route_path, additional_fee, ctx)
        
        CancelPacket { reason } ->
          validate_cancel_packet(packet_input, packet_output, datum, reason, ctx)
        
        UpdatePacketStatus { new_status, status_proof } ->
          validate_update_packet_status(packet_input, packet_output, datum, new_status, status_proof, ctx)
        
        AddConfirmation { validator_confirmation } ->
          validate_add_confirmation(packet_input, packet_output, datum, validator_confirmation, ctx)
        
        ReportError { error_code, error_message, error_proof } ->
          validate_report_error(packet_input, packet_output, datum, error_code, error_message, error_proof, ctx)
        
        UpdateValidatorSet { new_validators, threshold } ->
          validate_update_validator_set(packet_input, packet_output, datum, new_validators, threshold, ctx)
        
        UpdateBridgeConfig { new_bridge_id, new_operator } ->
          validate_update_bridge_config(packet_input, packet_output, datum, new_bridge_id, new_operator, ctx)
        
        EmergencyCancel { admin_signature, reason } ->
          validate_emergency_cancel(packet_input, packet_output, datum, admin_signature, reason, ctx)
      }
    }
    _ -> False
  }
}

// Validate basic packet constraints
fn validate_packet_basic_constraints(
  packet_input: transaction.Input,
  packet_output: transaction.Output,
  datum: CrossChainPacketDatum,
  ctx: ScriptContext
) -> Bool {
  // Validate CIP-68 structure
  expect validate_cip68_metadata_structure(datum.metadata)
  
  // Ensure packet NFT is preserved
  let packet_nft_policy = datum.metadata.policy_id
  let packet_nft_name = datum.metadata.asset_name
  
  expect quantity_of(packet_input.output.value, packet_nft_policy, packet_nft_name) == 1
  expect quantity_of(packet_output.value, packet_nft_policy, packet_nft_name) == 1
  
  // Validate minimum ADA requirements
  expect validate_min_ada_output(packet_output)
  
  // Ensure datum is properly attached
  expect Some(_) = packet_output.datum
  
  // Validate packet hasn't expired
  expect !is_packet_expired(datum, ctx)
  
  True
}

// Validate create packet operation
fn validate_create_packet(
  packet_input: transaction.Input,
  packet_output: transaction.Output,
  datum: CrossChainPacketDatum,
  message_type: MessageType,
  payload: ByteArray,
  destination_chain: Int,
  recipient: Address,
  timeout_slots: Int,
  ctx: ScriptContext
) -> Bool {
  // Validate this is a new packet creation
  expect datum.status == Created
  expect datum.sequence_number == 0
  
  // Validate message parameters
  expect bytearray.length(payload) > 0
  expect bytearray.length(payload) <= 4096 // Maximum payload size
  expect destination_chain > 0
  expect timeout_slots > 0
  expect timeout_slots <= 604800 // Maximum 7 days
  
  // Validate message type
  expect validate_message_type(message_type)
  
  // Generate packet ID
  let packet_id = generate_packet_id(ctx, destination_chain, recipient, payload)
  
  // Get updated datum
  expect Some(output_datum_data) = packet_output.datum
  expect updated_datum: CrossChainPacketDatum = output_datum_data
  
  // Validate updated state
  expect updated_datum.packet_id == packet_id
  expect updated_datum.message_type == message_type
  expect updated_datum.payload == payload
  expect updated_datum.destination_chain == destination_chain
  expect updated_datum.recipient == recipient
  expect updated_datum.timeout_slot == get_current_slot(ctx) + timeout_slots
  expect updated_datum.created_at_slot == get_current_slot(ctx)
  expect updated_datum.nonce > datum.nonce
  
  True
}

// Validate send packet operation
fn validate_send_packet(
  packet_input: transaction.Input,
  packet_output: transaction.Output,
  datum: CrossChainPacketDatum,
  bridge_id: ByteArray,
  route_path: List<Int>,
  gas_limit: Int,
  gas_price: Int,
  ctx: ScriptContext
) -> Bool {
  // Validate packet is ready to send
  expect datum.status == Created
  
  // Validate bridge and routing parameters
  expect bytearray.length(bridge_id) > 0
  expect list.length(route_path) > 0
  expect gas_limit > 0
  expect gas_price > 0
  
  // Validate route path includes destination
  expect list.has(route_path, datum.destination_chain)
  
  // Calculate total execution fee
  let execution_fee = gas_limit * gas_price
  
  // Validate fee payment
  expect validate_execution_fee_payment(execution_fee, ctx)
  
  // Get updated datum
  expect Some(output_datum_data) = packet_output.datum
  expect updated_datum: CrossChainPacketDatum = output_datum_data
  
  // Validate updated state
  expect updated_datum.status == Sent
  expect updated_datum.bridge_id == bridge_id
  expect updated_datum.route_path == route_path
  expect updated_datum.gas_limit == gas_limit
  expect updated_datum.gas_price == gas_price
  expect updated_datum.execution_fee == execution_fee
  expect updated_datum.last_updated_slot == get_current_slot(ctx)
  
  True
}

// Validate confirm packet operation
fn validate_confirm_packet(
  packet_input: transaction.Input,
  packet_output: transaction.Output,
  datum: CrossChainPacketDatum,
  confirmation: PacketConfirmation,
  ctx: ScriptContext
) -> Bool {
  // Validate packet is in transit
  expect datum.status == Sent || datum.status == InTransit
  
  // Validate confirmation
  expect validate_packet_confirmation(confirmation, datum)
  
  // Validate validator is authorized
  expect validate_authorized_validator(confirmation.validator_address, datum.validator_set)
  
  // Check if confirmation already exists
  expect !confirmation_exists(confirmation.validator_address, datum.confirmations)
  
  // Get updated datum
  expect Some(output_datum_data) = packet_output.datum
  expect updated_datum: CrossChainPacketDatum = output_datum_data
  
  // Validate confirmation is added
  expect list.has(updated_datum.confirmations, confirmation)
  expect list.length(updated_datum.confirmations) == list.length(datum.confirmations) + 1
  
  // Check if threshold reached
  if list.length(updated_datum.confirmations) >= datum.required_confirmations {
    expect updated_datum.status == Delivered
  } else {
    expect updated_datum.status == InTransit
  }
  
  expect updated_datum.last_updated_slot == get_current_slot(ctx)
  
  True
}

// Validate execute packet operation
fn validate_execute_packet(
  packet_input: transaction.Input,
  packet_output: transaction.Output,
  datum: CrossChainPacketDatum,
  execution_proof: ByteArray,
  execution_result: ByteArray,
  ctx: ScriptContext
) -> Bool {
  // Validate packet is delivered
  expect datum.status == Delivered
  
  // Validate execution proof
  expect bytearray.length(execution_proof) > 0
  expect validate_execution_proof(execution_proof, datum)
  
  // Validate execution based on message type
  expect validate_message_execution(datum.message_type, execution_result, ctx)
  
  // Get updated datum
  expect Some(output_datum_data) = packet_output.datum
  expect updated_datum: CrossChainPacketDatum = output_datum_data
  
  // Validate updated state
  expect updated_datum.status == Executed
  expect updated_datum.last_updated_slot == get_current_slot(ctx)
  
  True
}

// Validate retry packet operation
fn validate_retry_packet(
  packet_input: transaction.Input,
  packet_output: transaction.Output,
  datum: CrossChainPacketDatum,
  new_route_path: List<Int>,
  additional_fee: Int,
  ctx: ScriptContext
) -> Bool {
  // Validate packet can be retried
  expect datum.status == Failed
  expect datum.retry_count < datum.max_retries
  
  // Validate new route path
  expect list.length(new_route_path) > 0
  expect list.has(new_route_path, datum.destination_chain)
  
  // Validate additional fee payment
  if additional_fee > 0 {
    expect validate_additional_fee_payment(additional_fee, ctx)
  }
  
  // Get updated datum
  expect Some(output_datum_data) = packet_output.datum
  expect updated_datum: CrossChainPacketDatum = output_datum_data
  
  // Validate updated state
  expect updated_datum.status == Sent
  expect updated_datum.route_path == new_route_path
  expect updated_datum.retry_count == datum.retry_count + 1
  expect updated_datum.execution_fee >= datum.execution_fee + additional_fee
  expect updated_datum.last_updated_slot == get_current_slot(ctx)
  
  True
}

// Helper functions
fn is_packet_expired(datum: CrossChainPacketDatum, ctx: ScriptContext) -> Bool {
  get_current_slot(ctx) > datum.timeout_slot
}

fn validate_message_type(message_type: MessageType) -> Bool {
  when message_type is {
    TokenTransfer { transfer_type } ->
      validate_transfer_type(transfer_type)
    
    ContractCall { target_contract, function_selector, call_data } ->
      bytearray.length(target_contract) > 0 &&
      bytearray.length(function_selector) > 0 &&
      bytearray.length(call_data) >= 0
    
    StateSync { state_root, state_proof } ->
      bytearray.length(state_root) == 32 &&
      list.length(state_proof) > 0
    
    GovernanceMessage { proposal_id, action_type, parameters } ->
      proposal_id > 0 &&
      bytearray.length(action_type) > 0 &&
      bytearray.length(parameters) >= 0
    
    BridgeControl { control_type, control_data } ->
      validate_bridge_control_type(control_type) &&
      bytearray.length(control_data) >= 0
  }
}

fn validate_transfer_type(transfer_type: TransferType) -> Bool {
  when transfer_type is {
    Lock -> True
    Unlock -> True
    Mint -> True
    Burn -> True
  }
}

fn validate_bridge_control_type(control_type: BridgeControlType) -> Bool {
  when control_type is {
    AddValidator -> True
    RemoveValidator -> True
    UpdateThreshold -> True
    PauseTransfers -> True
    ResumeTransfers -> True
    UpdateFees -> True
  }
}

fn generate_packet_id(ctx: ScriptContext, destination_chain: Int, recipient: Address, payload: ByteArray) -> ByteArray {
  let tx_hash = ctx.transaction.id
  let recipient_bytes = address_to_bytes(recipient)
  let chain_bytes = bytearray.from_int(destination_chain)
  let combined = bytearray.concat(tx_hash, bytearray.concat(recipient_bytes, bytearray.concat(chain_bytes, payload)))
  blake2b_256(combined)
}

fn validate_packet_confirmation(confirmation: PacketConfirmation, datum: CrossChainPacketDatum) -> Bool {
  expect bytearray.length(confirmation.validator_address) == 32
  expect bytearray.length(confirmation.signature) == 64
  expect confirmation.timestamp > 0
  expect confirmation.block_height > 0
  expect bytearray.length(confirmation.confirmation_data) >= 0
  
  True
}

fn validate_authorized_validator(validator_address: ByteArray, validator_set: List<ValidatorInfo>) -> Bool {
  list.any(validator_set, fn(validator) {
    validator.validator_address == validator_address && validator.is_active
  })
}

fn confirmation_exists(validator_address: ByteArray, confirmations: List<PacketConfirmation>) -> Bool {
  list.any(confirmations, fn(confirmation) {
    confirmation.validator_address == validator_address
  })
}

fn validate_execution_proof(proof: ByteArray, datum: CrossChainPacketDatum) -> Bool {
  // Execution proof validation would be implemented here
  bytearray.length(proof) > 0
}

fn validate_message_execution(message_type: MessageType, execution_result: ByteArray, ctx: ScriptContext) -> Bool {
  // Message execution validation would be implemented here based on type
  bytearray.length(execution_result) >= 0
}

fn validate_execution_fee_payment(fee: Int, ctx: ScriptContext) -> Bool {
  // Fee payment validation would be implemented here
  fee > 0
}

fn validate_additional_fee_payment(fee: Int, ctx: ScriptContext) -> Bool {
  // Additional fee payment validation would be implemented here
  fee >= 0
}

fn get_current_slot(ctx: ScriptContext) -> Int {
  when ctx.transaction.validity_range.lower_bound.bound_type is {
    Some(slot) -> slot
    None -> 0
  }
}

fn address_to_bytes(address: Address) -> ByteArray {
  // Convert address to bytes representation
  when address.payment_credential is {
    VerificationKeyCredential(key_hash) -> key_hash
    ScriptCredential(script_hash) -> script_hash
  }
}

// Validate CIP-68 metadata structure
fn validate_cip68_metadata_structure(metadata: CIP68Metadata) -> Bool {
  // Validate policy ID length
  expect bytearray.length(metadata.policy_id) == 28
  
  // Validate asset name has proper CIP-68 prefix
  let asset_name_bytes = metadata.asset_name
  expect bytearray.length(asset_name_bytes) >= 4
  
  // Check for reference token prefix (000643b0) or user token prefix (001bc280)
  let prefix = bytearray.take(asset_name_bytes, 4)
  expect prefix == CIP68_REFERENCE_PREFIX || prefix == CIP68_USER_PREFIX
  
  True
}
